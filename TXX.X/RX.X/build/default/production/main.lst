CCS PCM C Compiler, Version 5.015, 5967               18-mar-17 00:57

               Filename:   C:\Users\Jorge Luis Silva C\MPLABXProjects\RX.X\build\default\production\main.lst

               ROM used:   205 words (3%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           9 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   07B
0003:  NOP
.................... /* 
.................... #include <16F877A.h> 
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=16MHz) 
....................  #use RS232(BAUD=9600,BITS=8) 
.................... #define LED PIN_B0 
.................... #define DELAY 1000 
....................  
.................... void main() 
.................... { 
....................  
....................    //Example blinking LED program 
....................    while(TRUE) 
....................    { 
....................        printf("Hello world!");  
....................       output_low(LED); 
....................       delay_ms(DELAY); 
....................       output_high(LED); 
....................       delay_ms(DELAY); 
....................    } 
....................  
.................... }*/ 
....................  
....................  
.................... /*--------------------------------------------------------*\  
.................... | Comunicación entre dos PIC's por USART. Transmisor |  
.................... | autor: biblioman |  
.................... | www.aquihayapuntes.com |  
.................... \*--------------------------------------------------------*/  
....................   
.................... #include <16F877A.h>  
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA C8,32
0005:  DATA 6C,36
0006:  DATA 6F,10
0007:  DATA F7,37
0008:  DATA 72,36
0009:  DATA E4,10
000A:  DATA 20,05
000B:  DATA 00,00
*
0021:  MOVF   0B,W
0022:  MOVWF  21
0023:  BCF    0B.7
0024:  BSF    03.5
0025:  BSF    03.6
0026:  BSF    0C.7
0027:  BSF    0C.0
0028:  NOP
0029:  NOP
002A:  BCF    03.5
002B:  BCF    03.6
002C:  BTFSC  21.7
002D:  BSF    0B.7
002E:  BSF    03.6
002F:  MOVF   0C,W
0030:  ANDLW  7F
0031:  BTFSC  03.2
0032:  GOTO   077
0033:  BCF    03.6
0034:  MOVWF  21
0035:  BSF    03.6
0036:  MOVF   0D,W
0037:  BCF    03.6
0038:  MOVWF  22
0039:  BSF    03.6
003A:  MOVF   0F,W
003B:  BCF    03.6
003C:  MOVWF  23
003D:  MOVF   21,W
003E:  BTFSS  0C.4
003F:  GOTO   03E
0040:  MOVWF  19
0041:  MOVF   22,W
0042:  BSF    03.6
0043:  MOVWF  0D
0044:  BCF    03.6
0045:  MOVF   23,W
0046:  BSF    03.6
0047:  MOVWF  0F
0048:  BCF    03.6
0049:  MOVF   0B,W
004A:  MOVWF  24
004B:  BCF    0B.7
004C:  BSF    03.5
004D:  BSF    03.6
004E:  BSF    0C.7
004F:  BSF    0C.0
0050:  NOP
0051:  NOP
0052:  BCF    03.5
0053:  BCF    03.6
0054:  BTFSC  24.7
0055:  BSF    0B.7
0056:  BSF    03.6
0057:  RLF    0C,W
0058:  RLF    0E,W
0059:  ANDLW  7F
005A:  BTFSC  03.2
005B:  GOTO   077
005C:  BCF    03.6
005D:  MOVWF  21
005E:  BSF    03.6
005F:  MOVF   0D,W
0060:  BCF    03.6
0061:  MOVWF  22
0062:  BSF    03.6
0063:  MOVF   0F,W
0064:  BCF    03.6
0065:  MOVWF  23
0066:  MOVF   21,W
0067:  BTFSS  0C.4
0068:  GOTO   067
0069:  MOVWF  19
006A:  MOVF   22,W
006B:  BSF    03.6
006C:  MOVWF  0D
006D:  BCF    03.6
006E:  MOVF   23,W
006F:  BSF    03.6
0070:  MOVWF  0F
0071:  INCF   0D,F
0072:  BTFSC  03.2
0073:  INCF   0F,F
0074:  BCF    03.6
0075:  GOTO   021
0076:  BSF    03.6
0077:  BCF    03.6
0078:  BCF    0A.3
0079:  BCF    0A.4
007A:  GOTO   0CB (RETURN)
....................  
.................... #list 
....................  
.................... #FUSES NOWDT, XT, NOPUT, NOPROTECT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG  
.................... #use delay(crystal=16MHz) 
*
000C:  MOVLW  22
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  05
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  2E
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETURN
.................... #use rs232(uart1, baud=9600)//usart1 -->ajuste de XMIT y RCV para la USART 1  
.................... #define LED PIN_B0 
.................... void main() {  
*
007B:  MOVF   03,W
007C:  ANDLW  1F
007D:  MOVWF  03
007E:  MOVLW  19
007F:  BSF    03.5
0080:  MOVWF  19
0081:  MOVLW  A2
0082:  MOVWF  18
0083:  MOVLW  90
0084:  BCF    03.5
0085:  MOVWF  18
0086:  BSF    03.5
0087:  BSF    1F.0
0088:  BSF    1F.1
0089:  BSF    1F.2
008A:  BCF    1F.3
008B:  MOVLW  07
008C:  MOVWF  1C
008D:  BCF    03.7
....................      
....................       output_low(LED); 
008E:  BCF    06.0
008F:  BCF    03.5
0090:  BCF    06.0
....................       delay_ms(1000); 
0091:  MOVLW  04
0092:  MOVWF  21
0093:  MOVLW  FA
0094:  MOVWF  22
0095:  CALL   00C
0096:  DECFSZ 21,F
0097:  GOTO   093
....................       output_high(LED); 
0098:  BSF    03.5
0099:  BCF    06.0
009A:  BCF    03.5
009B:  BSF    06.0
....................       delay_ms(1000); 
009C:  MOVLW  04
009D:  MOVWF  21
009E:  MOVLW  FA
009F:  MOVWF  22
00A0:  CALL   00C
00A1:  DECFSZ 21,F
00A2:  GOTO   09E
....................       output_low(LED); 
00A3:  BSF    03.5
00A4:  BCF    06.0
00A5:  BCF    03.5
00A6:  BCF    06.0
....................       delay_ms(1000); 
00A7:  MOVLW  04
00A8:  MOVWF  21
00A9:  MOVLW  FA
00AA:  MOVWF  22
00AB:  CALL   00C
00AC:  DECFSZ 21,F
00AD:  GOTO   0A9
....................       output_high(LED); 
00AE:  BSF    03.5
00AF:  BCF    06.0
00B0:  BCF    03.5
00B1:  BSF    06.0
....................       delay_ms(1000); 
00B2:  MOVLW  04
00B3:  MOVWF  21
00B4:  MOVLW  FA
00B5:  MOVWF  22
00B6:  CALL   00C
00B7:  DECFSZ 21,F
00B8:  GOTO   0B4
....................  while(TRUE)  
....................  {  
....................  putc('h');//Envía el caracter vía serie por la USART del PIC  
00B9:  MOVLW  68
00BA:  BTFSS  0C.4
00BB:  GOTO   0BA
00BC:  MOVWF  19
....................  delay_ms(1000); 
00BD:  MOVLW  04
00BE:  MOVWF  21
00BF:  MOVLW  FA
00C0:  MOVWF  22
00C1:  CALL   00C
00C2:  DECFSZ 21,F
00C3:  GOTO   0BF
....................  printf("Hello world! \n");  
00C4:  MOVLW  04
00C5:  BSF    03.6
00C6:  MOVWF  0D
00C7:  MOVLW  00
00C8:  MOVWF  0F
00C9:  BCF    03.6
00CA:  GOTO   021
00CB:  GOTO   0B9
....................   
....................  }  
....................   
.................... } 
00CC:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
