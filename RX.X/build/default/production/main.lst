CCS PCM C Compiler, Version 5.071d, 1               30-Mar-17 18:26
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Julián Sibaja\Documents\MPLAB projects\WSN-for-PIC-and-nRF24l01-master\RX.X\build\default\production\main.lst

               ROM used:   1089 words (13%)
                           Largest free fragment is 2048
               RAM used:   34 (9%) at main() level
                           43 (12%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3CB
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   0DF
.................... #include <16F886.h>  
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
*
0102:  DATA E3,37
0103:  DATA 6E,33
0104:  DATA E9,33
0105:  DATA 75,39
0106:  DATA 61,32
0107:  DATA EF,10
0108:  DATA 20,05
0109:  DATA 00,00
*
0371:  MOVF   0B,W
0372:  MOVWF  3C
0373:  BCF    0B.7
0374:  BSF    03.5
0375:  BSF    03.6
0376:  BSF    0C.7
0377:  BSF    0C.0
0378:  NOP
0379:  NOP
037A:  BCF    03.5
037B:  BCF    03.6
037C:  BTFSC  3C.7
037D:  BSF    0B.7
037E:  BSF    03.6
037F:  MOVF   0C,W
0380:  ANDLW  7F
0381:  BTFSC  03.2
0382:  GOTO   3C7
0383:  BCF    03.6
0384:  MOVWF  3C
0385:  BSF    03.6
0386:  MOVF   0D,W
0387:  BCF    03.6
0388:  MOVWF  3D
0389:  BSF    03.6
038A:  MOVF   0F,W
038B:  BCF    03.6
038C:  MOVWF  3E
038D:  MOVF   3C,W
038E:  BTFSS  0C.4
038F:  GOTO   38E
0390:  MOVWF  19
0391:  MOVF   3D,W
0392:  BSF    03.6
0393:  MOVWF  0D
0394:  BCF    03.6
0395:  MOVF   3E,W
0396:  BSF    03.6
0397:  MOVWF  0F
0398:  BCF    03.6
0399:  MOVF   0B,W
039A:  MOVWF  3F
039B:  BCF    0B.7
039C:  BSF    03.5
039D:  BSF    03.6
039E:  BSF    0C.7
039F:  BSF    0C.0
03A0:  NOP
03A1:  NOP
03A2:  BCF    03.5
03A3:  BCF    03.6
03A4:  BTFSC  3F.7
03A5:  BSF    0B.7
03A6:  BSF    03.6
03A7:  RLF    0C,W
03A8:  RLF    0E,W
03A9:  ANDLW  7F
03AA:  BTFSC  03.2
03AB:  GOTO   3C7
03AC:  BCF    03.6
03AD:  MOVWF  3C
03AE:  BSF    03.6
03AF:  MOVF   0D,W
03B0:  BCF    03.6
03B1:  MOVWF  3D
03B2:  BSF    03.6
03B3:  MOVF   0F,W
03B4:  BCF    03.6
03B5:  MOVWF  3E
03B6:  MOVF   3C,W
03B7:  BTFSS  0C.4
03B8:  GOTO   3B7
03B9:  MOVWF  19
03BA:  MOVF   3D,W
03BB:  BSF    03.6
03BC:  MOVWF  0D
03BD:  BCF    03.6
03BE:  MOVF   3E,W
03BF:  BSF    03.6
03C0:  MOVWF  0F
03C1:  INCF   0D,F
03C2:  BTFSC  03.2
03C3:  INCF   0F,F
03C4:  BCF    03.6
03C5:  GOTO   371
03C6:  BSF    03.6
03C7:  BCF    03.6
03C8:  BCF    0A.3
03C9:  BCF    0A.4
03CA:  GOTO   43F (RETURN)
....................  
.................... #list 
....................  
.................... #FUSES NOWDT, XT, NOPUT, NOPROTECT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG  
.................... #use delay(crystal=16MHz) 
*
010A:  MOVLW  3D
010B:  MOVWF  04
010C:  BCF    03.7
010D:  MOVF   00,W
010E:  BTFSC  03.2
010F:  GOTO   11E
0110:  MOVLW  05
0111:  MOVWF  78
0112:  CLRF   77
0113:  DECFSZ 77,F
0114:  GOTO   113
0115:  DECFSZ 78,F
0116:  GOTO   112
0117:  MOVLW  2E
0118:  MOVWF  77
0119:  DECFSZ 77,F
011A:  GOTO   119
011B:  GOTO   11C
011C:  DECFSZ 00,F
011D:  GOTO   110
011E:  RETURN
.................... #include "lib_rf2gh4_10.h" 
.................... //******************************************************************************** 
.................... //*    lib_rf2gh4_10.h                                                           * 
.................... //*     version: 1.0                                                             * 
.................... //*     Esta librería contiene las funciones necesarias para gestionar el módulo * 
.................... //*    RF2GH4 con programas del compilador CCS                                   * 
.................... //*    Copyright (C) 2007  Bizintek Innova S.L.                                  * 
.................... //******************************************************************************** 
.................... //*    This program is free software; you can redistribute it and/or modify      * 
.................... //*    it under the terms of the GNU General Public License as published by      * 
.................... //*    the Free Software Foundation; either version 2 of the License, or         * 
.................... //*    (at your option) any later version.                                       * 
.................... //*                                                                              * 
.................... //*    This program is distributed in the hope that it will be useful,           * 
.................... //*    but WITHOUT ANY WARRANTY; without even the implied warranty of            * 
.................... //*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             * 
.................... //*    GNU General Public License for more details.                              * 
.................... //*                                                                              * 
.................... //*    You should have received a copy of the GNU General Public License along   * 
.................... //*    with this program; if not, write to the Free Software Foundation, Inc.,   * 
.................... //*    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               * 
.................... //******************************************************************************** 
....................  
....................  
.................... //******************** 
.................... //*   DEFINICIONES   * 
.................... //******************** 
....................  
.................... // PORTB 
.................... #define RF_IRQ        PIN_B0 
.................... #define RF_IRQ_TRIS   TRISB,0 
....................  
.................... // PORTC 
.................... #define   RF_CS       PIN_C1 
.................... #define   RF_CE       PIN_C2 
.................... #define   SCK         PIN_C3 
.................... #define   SDI         PIN_C4 
.................... #define   SDO         PIN_C5 
....................                        
.................... #define   RF_CS_TRIS  TRISC,1 
.................... #define   RF_CE_TRIS  TRISC,2 
.................... #define   SCK_TRIS    TRISC,3 
.................... #define   SDI_TRIS    TRISC,4 
.................... #define   SDO_TRIS    TRISC,5 
....................  
....................  
....................  
.................... //***************** 
.................... //*   VARIABLES   * 
.................... //***************** 
.................... #BYTE TRISA     =  0x85 
.................... #BYTE TRISB     =  0x86 
.................... #BYTE TRISC     =  0x87 
.................... #BYTE INTCON    =  0x0B 
....................  
.................... //Variables internas 
.................... static int1        interRF; 
*
03F2:  BCF    03.6
03F3:  BCF    2B.0
.................... static int16       noRF; 
03F4:  CLRF   2C
03F5:  CLRF   2D
.................... static int1        RCVNW=0; 
.................... static int8        DATA_N_SND=0; 
.................... static int8        DATA_N_RCV=0; 
....................  
.................... //Variables configurables 
.................... static int8        RF_DATA[8]; 
03F6:  CLRF   30
03F7:  CLRF   31
03F8:  CLRF   32
03F9:  CLRF   33
03FA:  CLRF   34
03FB:  CLRF   35
03FC:  CLRF   36
03FD:  CLRF   37
.................... static int8        RF_DIR; 
03FE:  CLRF   38
....................  
....................  
.................... //************** 
.................... //*   CÓDIGO   * 
.................... //************** 
....................  
.................... //***************************************************** 
.................... //*               RF_CONFIG_SPI()                     * 
.................... //***************************************************** 
.................... //*Descripción: La función configura el módulo SPI del* 
.................... //*microcontrolador.En ella se especifica como salida * 
.................... //*SDO y como entrada SDI entre otros parámetros del  * 
.................... //*protocolo SPI.                                     * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_CONFIG_SPI() 
.................... { 
....................    //Configuración I/O. 
....................    bit_clear(SCK_TRIS); 
*
012D:  BSF    03.5
012E:  BCF    07.3
....................    bit_set(SDI_TRIS); 
012F:  BSF    07.4
....................    bit_clear(SDO_TRIS); 
0130:  BCF    07.5
....................  
....................    //Configuración módulo comunicaciones. 
....................    setup_spi(SPI_MASTER|SPI_L_TO_H|SPI_XMIT_L_TO_H 
....................    |SPI_CLK_DIV_4|SPI_SAMPLE_AT_END); 
.................... } 
0131:  BCF    03.5
0132:  BCF    14.5
0133:  BCF    39.5
0134:  MOVF   39,W
0135:  BSF    03.5
0136:  MOVWF  07
0137:  BCF    03.5
0138:  BSF    39.4
0139:  MOVF   39,W
013A:  BSF    03.5
013B:  MOVWF  07
013C:  BCF    03.5
013D:  BCF    39.3
013E:  MOVF   39,W
013F:  BSF    03.5
0140:  MOVWF  07
0141:  MOVLW  20
0142:  BCF    03.5
0143:  MOVWF  14
0144:  MOVLW  C0
0145:  BSF    03.5
0146:  MOVWF  14
0147:  BCF    03.5
0148:  BCF    0A.3
0149:  BCF    0A.4
014A:  GOTO   432 (RETURN)
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                    RF_INT_EN()                    * 
.................... //***************************************************** 
.................... //*Descripción:Se encarga de habilitar la interrupción* 
.................... //*externa (RB0) utilizada por el módulo de RF en la  * 
.................... //*recepción de datos.                                * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_INT_EN() 
.................... { 
....................    //Habilitar interrupciones externas con flanco de 
....................    //bajada. 
....................    disable_interrupts(global); 
....................    enable_interrupts(int_ext); 
*
011F:  BCF    0B.6
0120:  BCF    0B.7
0121:  BTFSC  0B.7
0122:  GOTO   120
....................    ext_int_edge( H_TO_L ); 
0123:  BSF    0B.4
....................    bit_set(RF_IRQ_TRIS); 
0124:  BSF    03.5
0125:  BCF    01.6
....................    enable_interrupts(global); 
0126:  BSF    06.0
.................... } 
0127:  MOVLW  C0
0128:  BCF    03.5
0129:  IORWF  0B,F
012A:  BCF    0A.3
012B:  BCF    0A.4
012C:  GOTO   431 (RETURN)
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*        RF_CONFIG(int canal, int dir)              * 
.................... //***************************************************** 
.................... //*Descripción:Esta función se encarga de configurar  * 
.................... //*el transceptor habilitando su propia dirección de  * 
.................... //*escucha y el canal entre otros parámetros.         * 
.................... //***************************************************** 
.................... //*Variables de entrada:- Canal                       * 
.................... //*                     - Direccion                   * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_CONFIG(int canal, int dir) 
.................... { 
....................  
....................    bit_clear(RF_CS_TRIS); 
....................    bit_set(RF_IRQ_TRIS); 
*
014B:  BSF    03.5
014C:  BCF    07.1
....................    bit_clear(RF_CE_TRIS); 
014D:  BSF    06.0
....................  
014E:  BCF    07.2
....................    output_low(RF_CE); 
....................  
014F:  BCF    03.5
0150:  BCF    39.2
0151:  MOVF   39,W
0152:  BSF    03.5
0153:  MOVWF  07
0154:  BCF    03.5
0155:  BCF    07.2
....................    // TX_ADDR (0xFF) 
....................    //Configuración de la dirección de envio aleatoria. 
....................    //En la función de enviar se configura la direccion 
....................    //deseada por el usuario. 
....................    output_low(RF_CS); 
....................    spi_write(0x30); 
0156:  BCF    39.1
0157:  MOVF   39,W
0158:  BSF    03.5
0159:  MOVWF  07
015A:  BCF    03.5
015B:  BCF    07.1
....................    spi_write(0xFF); 
015C:  MOVF   13,W
015D:  MOVLW  30
015E:  MOVWF  13
015F:  BSF    03.5
0160:  RRF    14,W
0161:  BTFSS  03.0
0162:  GOTO   160
....................    spi_write(0xC2); 
0163:  BCF    03.5
0164:  MOVF   13,W
0165:  MOVLW  FF
0166:  MOVWF  13
0167:  BSF    03.5
0168:  RRF    14,W
0169:  BTFSS  03.0
016A:  GOTO   168
....................    spi_write(0xC2); 
016B:  BCF    03.5
016C:  MOVF   13,W
016D:  MOVLW  C2
016E:  MOVWF  13
016F:  BSF    03.5
0170:  RRF    14,W
0171:  BTFSS  03.0
0172:  GOTO   170
....................    spi_write(0xC2); 
0173:  BCF    03.5
0174:  MOVF   13,W
0175:  MOVLW  C2
0176:  MOVWF  13
0177:  BSF    03.5
0178:  RRF    14,W
0179:  BTFSS  03.0
017A:  GOTO   178
....................    spi_write(0xC2); 
017B:  BCF    03.5
017C:  MOVF   13,W
017D:  MOVLW  C2
017E:  MOVWF  13
017F:  BSF    03.5
0180:  RRF    14,W
0181:  BTFSS  03.0
0182:  GOTO   180
....................    output_high(RF_CS); 
0183:  BCF    03.5
0184:  MOVF   13,W
0185:  MOVLW  C2
0186:  MOVWF  13
0187:  BSF    03.5
0188:  RRF    14,W
0189:  BTFSS  03.0
018A:  GOTO   188
....................  
018B:  BCF    03.5
018C:  BCF    39.1
018D:  MOVF   39,W
018E:  BSF    03.5
018F:  MOVWF  07
0190:  BCF    03.5
0191:  BSF    07.1
....................    // RX_ADDR_P0 (0xFF) ACK 
....................    //Configuración de la direccióndel Pipe0 para la 
....................    //recepción de ACK. 
....................    output_low(RF_CS); 
....................    spi_write(0x2A); 
0192:  BCF    39.1
0193:  MOVF   39,W
0194:  BSF    03.5
0195:  MOVWF  07
0196:  BCF    03.5
0197:  BCF    07.1
....................    spi_write(0xFF); 
0198:  MOVF   13,W
0199:  MOVLW  2A
019A:  MOVWF  13
019B:  BSF    03.5
019C:  RRF    14,W
019D:  BTFSS  03.0
019E:  GOTO   19C
....................    spi_write(0xC2); 
019F:  BCF    03.5
01A0:  MOVF   13,W
01A1:  MOVLW  FF
01A2:  MOVWF  13
01A3:  BSF    03.5
01A4:  RRF    14,W
01A5:  BTFSS  03.0
01A6:  GOTO   1A4
....................    spi_write(0xC2); 
01A7:  BCF    03.5
01A8:  MOVF   13,W
01A9:  MOVLW  C2
01AA:  MOVWF  13
01AB:  BSF    03.5
01AC:  RRF    14,W
01AD:  BTFSS  03.0
01AE:  GOTO   1AC
....................    spi_write(0xC2); 
01AF:  BCF    03.5
01B0:  MOVF   13,W
01B1:  MOVLW  C2
01B2:  MOVWF  13
01B3:  BSF    03.5
01B4:  RRF    14,W
01B5:  BTFSS  03.0
01B6:  GOTO   1B4
....................    spi_write(0xC2); 
01B7:  BCF    03.5
01B8:  MOVF   13,W
01B9:  MOVLW  C2
01BA:  MOVWF  13
01BB:  BSF    03.5
01BC:  RRF    14,W
01BD:  BTFSS  03.0
01BE:  GOTO   1BC
....................    output_high(RF_CS); 
01BF:  BCF    03.5
01C0:  MOVF   13,W
01C1:  MOVLW  C2
01C2:  MOVWF  13
01C3:  BSF    03.5
01C4:  RRF    14,W
01C5:  BTFSS  03.0
01C6:  GOTO   1C4
....................  
01C7:  BCF    03.5
01C8:  BCF    39.1
01C9:  MOVF   39,W
01CA:  BSF    03.5
01CB:  MOVWF  07
01CC:  BCF    03.5
01CD:  BSF    07.1
....................    // RX_ADDR_P1 (dir) 
....................    //Configuración de la direccióndel Pipe1 para la 
....................    //recepción de tramas. 
....................    output_low(RF_CS); 
....................    spi_write(0x2B); 
01CE:  BCF    39.1
01CF:  MOVF   39,W
01D0:  BSF    03.5
01D1:  MOVWF  07
01D2:  BCF    03.5
01D3:  BCF    07.1
....................    spi_write(dir); 
01D4:  MOVF   13,W
01D5:  MOVLW  2B
01D6:  MOVWF  13
01D7:  BSF    03.5
01D8:  RRF    14,W
01D9:  BTFSS  03.0
01DA:  GOTO   1D8
....................    spi_write(0xC2); 
01DB:  BCF    03.5
01DC:  MOVF   3D,W
01DD:  MOVWF  13
01DE:  BSF    03.5
01DF:  RRF    14,W
01E0:  BTFSS  03.0
01E1:  GOTO   1DF
....................    spi_write(0xC2); 
01E2:  BCF    03.5
01E3:  MOVF   13,W
01E4:  MOVLW  C2
01E5:  MOVWF  13
01E6:  BSF    03.5
01E7:  RRF    14,W
01E8:  BTFSS  03.0
01E9:  GOTO   1E7
....................    spi_write(0xC2); 
01EA:  BCF    03.5
01EB:  MOVF   13,W
01EC:  MOVLW  C2
01ED:  MOVWF  13
01EE:  BSF    03.5
01EF:  RRF    14,W
01F0:  BTFSS  03.0
01F1:  GOTO   1EF
....................    spi_write(0xC2); 
01F2:  BCF    03.5
01F3:  MOVF   13,W
01F4:  MOVLW  C2
01F5:  MOVWF  13
01F6:  BSF    03.5
01F7:  RRF    14,W
01F8:  BTFSS  03.0
01F9:  GOTO   1F7
....................    output_high(RF_CS); 
01FA:  BCF    03.5
01FB:  MOVF   13,W
01FC:  MOVLW  C2
01FD:  MOVWF  13
01FE:  BSF    03.5
01FF:  RRF    14,W
0200:  BTFSS  03.0
0201:  GOTO   1FF
....................  
0202:  BCF    03.5
0203:  BCF    39.1
0204:  MOVF   39,W
0205:  BSF    03.5
0206:  MOVWF  07
0207:  BCF    03.5
0208:  BSF    07.1
....................    // RX_ADDR_P2 (0x00) BROADCAST 
....................    //Configuración de la direccióndel Pipe2 para la 
....................    //recepción de tramas 
....................    output_low(RF_CS); 
....................    spi_write(0x2C); 
0209:  BCF    39.1
020A:  MOVF   39,W
020B:  BSF    03.5
020C:  MOVWF  07
020D:  BCF    03.5
020E:  BCF    07.1
....................    spi_write(0x00); 
020F:  MOVF   13,W
0210:  MOVLW  2C
0211:  MOVWF  13
0212:  BSF    03.5
0213:  RRF    14,W
0214:  BTFSS  03.0
0215:  GOTO   213
....................    output_high(RF_CS); 
0216:  BCF    03.5
0217:  MOVF   13,W
0218:  CLRF   13
0219:  BSF    03.5
021A:  RRF    14,W
021B:  BTFSS  03.0
021C:  GOTO   21A
....................  
021D:  BCF    03.5
021E:  BCF    39.1
021F:  MOVF   39,W
0220:  BSF    03.5
0221:  MOVWF  07
0222:  BCF    03.5
0223:  BSF    07.1
....................    // EN_AA 
....................    //Habilitar AutoAck en los Pipe0,Pipe1 y Pipe2. 
....................    output_low(RF_CS); 
....................    spi_write(0x21); 
0224:  BCF    39.1
0225:  MOVF   39,W
0226:  BSF    03.5
0227:  MOVWF  07
0228:  BCF    03.5
0229:  BCF    07.1
....................    spi_write(0x07); 
022A:  MOVF   13,W
022B:  MOVLW  21
022C:  MOVWF  13
022D:  BSF    03.5
022E:  RRF    14,W
022F:  BTFSS  03.0
0230:  GOTO   22E
....................    output_high(RF_CS); 
0231:  BCF    03.5
0232:  MOVF   13,W
0233:  MOVLW  07
0234:  MOVWF  13
0235:  BSF    03.5
0236:  RRF    14,W
0237:  BTFSS  03.0
0238:  GOTO   236
....................  
0239:  BCF    03.5
023A:  BCF    39.1
023B:  MOVF   39,W
023C:  BSF    03.5
023D:  MOVWF  07
023E:  BCF    03.5
023F:  BSF    07.1
....................    // EN_RXADDR 
....................    //Habilitar los Pipe0,Pipe1 y Pipe2. 
....................    output_low(RF_CS); 
....................    spi_write(0x22); 
0240:  BCF    39.1
0241:  MOVF   39,W
0242:  BSF    03.5
0243:  MOVWF  07
0244:  BCF    03.5
0245:  BCF    07.1
....................    spi_write(0x07); 
0246:  MOVF   13,W
0247:  MOVLW  22
0248:  MOVWF  13
0249:  BSF    03.5
024A:  RRF    14,W
024B:  BTFSS  03.0
024C:  GOTO   24A
....................    output_high(RF_CS); 
024D:  BCF    03.5
024E:  MOVF   13,W
024F:  MOVLW  07
0250:  MOVWF  13
0251:  BSF    03.5
0252:  RRF    14,W
0253:  BTFSS  03.0
0254:  GOTO   252
....................  
0255:  BCF    03.5
0256:  BCF    39.1
0257:  MOVF   39,W
0258:  BSF    03.5
0259:  MOVWF  07
025A:  BCF    03.5
025B:  BSF    07.1
....................    // SETUP_AW 
....................    //Configuración de la longitud de las direcciones. 
....................    //Direcciones de 5 bytes. 
....................    output_low(RF_CS); 
....................    spi_write(0x23); 
025C:  BCF    39.1
025D:  MOVF   39,W
025E:  BSF    03.5
025F:  MOVWF  07
0260:  BCF    03.5
0261:  BCF    07.1
....................    spi_write(0x03); 
0262:  MOVF   13,W
0263:  MOVLW  23
0264:  MOVWF  13
0265:  BSF    03.5
0266:  RRF    14,W
0267:  BTFSS  03.0
0268:  GOTO   266
....................    output_high(RF_CS); 
0269:  BCF    03.5
026A:  MOVF   13,W
026B:  MOVLW  03
026C:  MOVWF  13
026D:  BSF    03.5
026E:  RRF    14,W
026F:  BTFSS  03.0
0270:  GOTO   26E
....................  
0271:  BCF    03.5
0272:  BCF    39.1
0273:  MOVF   39,W
0274:  BSF    03.5
0275:  MOVWF  07
0276:  BCF    03.5
0277:  BSF    07.1
....................    //SETUP_RETR 
....................    //Configuración de las retrasmisiones en la transmisión. 
....................    //Diez retransmisiones cada 336us. 
....................    output_low(RF_CS); 
....................    spi_write(0x24); 
0278:  BCF    39.1
0279:  MOVF   39,W
027A:  BSF    03.5
027B:  MOVWF  07
027C:  BCF    03.5
027D:  BCF    07.1
....................    spi_write(0x0A); 
027E:  MOVF   13,W
027F:  MOVLW  24
0280:  MOVWF  13
0281:  BSF    03.5
0282:  RRF    14,W
0283:  BTFSS  03.0
0284:  GOTO   282
....................    output_high(RF_CS); 
0285:  BCF    03.5
0286:  MOVF   13,W
0287:  MOVLW  0A
0288:  MOVWF  13
0289:  BSF    03.5
028A:  RRF    14,W
028B:  BTFSS  03.0
028C:  GOTO   28A
....................  
028D:  BCF    03.5
028E:  BCF    39.1
028F:  MOVF   39,W
0290:  BSF    03.5
0291:  MOVWF  07
0292:  BCF    03.5
0293:  BSF    07.1
....................    //RF_CH 
....................    //Configuración del canal. 
....................    //Canal elegido por el usuario (0x01 - 0x7F). 
....................    output_low(RF_CS); 
....................    spi_write(0x25); 
0294:  BCF    39.1
0295:  MOVF   39,W
0296:  BSF    03.5
0297:  MOVWF  07
0298:  BCF    03.5
0299:  BCF    07.1
....................    spi_write(canal); 
029A:  MOVF   13,W
029B:  MOVLW  25
029C:  MOVWF  13
029D:  BSF    03.5
029E:  RRF    14,W
029F:  BTFSS  03.0
02A0:  GOTO   29E
....................    output_high(RF_CS); 
02A1:  BCF    03.5
02A2:  MOVF   3C,W
02A3:  MOVWF  13
02A4:  BSF    03.5
02A5:  RRF    14,W
02A6:  BTFSS  03.0
02A7:  GOTO   2A5
....................  
02A8:  BCF    03.5
02A9:  BCF    39.1
02AA:  MOVF   39,W
02AB:  BSF    03.5
02AC:  MOVWF  07
02AD:  BCF    03.5
02AE:  BSF    07.1
....................    //RF_SETUP 
....................    //Configuración aspectos RF. 
....................    //Ganancia máxima de LNA, 0dBm potencia de salida y 1Mbps de velocidad. 
....................    output_low(RF_CS); 
....................    spi_write(0x26); 
02AF:  BCF    39.1
02B0:  MOVF   39,W
02B1:  BSF    03.5
02B2:  MOVWF  07
02B3:  BCF    03.5
02B4:  BCF    07.1
....................    spi_write(0x07); 
02B5:  MOVF   13,W
02B6:  MOVLW  26
02B7:  MOVWF  13
02B8:  BSF    03.5
02B9:  RRF    14,W
02BA:  BTFSS  03.0
02BB:  GOTO   2B9
....................    output_high(RF_CS); 
02BC:  BCF    03.5
02BD:  MOVF   13,W
02BE:  MOVLW  07
02BF:  MOVWF  13
02C0:  BSF    03.5
02C1:  RRF    14,W
02C2:  BTFSS  03.0
02C3:  GOTO   2C1
....................  
02C4:  BCF    03.5
02C5:  BCF    39.1
02C6:  MOVF   39,W
02C7:  BSF    03.5
02C8:  MOVWF  07
02C9:  BCF    03.5
02CA:  BSF    07.1
....................    //STATUS 
....................    //Reseteo del registro STATUS 
....................    output_low(RF_CS); 
....................    spi_write(0x27); 
02CB:  BCF    39.1
02CC:  MOVF   39,W
02CD:  BSF    03.5
02CE:  MOVWF  07
02CF:  BCF    03.5
02D0:  BCF    07.1
....................    spi_write(0x70); 
02D1:  MOVF   13,W
02D2:  MOVLW  27
02D3:  MOVWF  13
02D4:  BSF    03.5
02D5:  RRF    14,W
02D6:  BTFSS  03.0
02D7:  GOTO   2D5
....................    output_high(RF_CS); 
02D8:  BCF    03.5
02D9:  MOVF   13,W
02DA:  MOVLW  70
02DB:  MOVWF  13
02DC:  BSF    03.5
02DD:  RRF    14,W
02DE:  BTFSS  03.0
02DF:  GOTO   2DD
....................  
02E0:  BCF    03.5
02E1:  BCF    39.1
02E2:  MOVF   39,W
02E3:  BSF    03.5
02E4:  MOVWF  07
02E5:  BCF    03.5
02E6:  BSF    07.1
....................    //RX_PW_P0 
....................    //Nº de bytes en Pipe0. 
....................    //1 byte (ACK). 
....................    output_low(RF_CS); 
....................    spi_write(0x31); 
02E7:  BCF    39.1
02E8:  MOVF   39,W
02E9:  BSF    03.5
02EA:  MOVWF  07
02EB:  BCF    03.5
02EC:  BCF    07.1
....................    spi_write(0x01); 
02ED:  MOVF   13,W
02EE:  MOVLW  31
02EF:  MOVWF  13
02F0:  BSF    03.5
02F1:  RRF    14,W
02F2:  BTFSS  03.0
02F3:  GOTO   2F1
....................    output_high(RF_CS); 
02F4:  BCF    03.5
02F5:  MOVF   13,W
02F6:  MOVLW  01
02F7:  MOVWF  13
02F8:  BSF    03.5
02F9:  RRF    14,W
02FA:  BTFSS  03.0
02FB:  GOTO   2F9
....................  
02FC:  BCF    03.5
02FD:  BCF    39.1
02FE:  MOVF   39,W
02FF:  BSF    03.5
0300:  MOVWF  07
0301:  BCF    03.5
0302:  BSF    07.1
....................    //RX_PW_P1 
....................    //Nº de bytes en Pipe1. 
....................    //10 byte (Direccion emisor y trama). 
....................    output_low(RF_CS); 
....................    spi_write(0x32); 
0303:  BCF    39.1
0304:  MOVF   39,W
0305:  BSF    03.5
0306:  MOVWF  07
0307:  BCF    03.5
0308:  BCF    07.1
....................    spi_write(0x0A); 
0309:  MOVF   13,W
030A:  MOVLW  32
030B:  MOVWF  13
030C:  BSF    03.5
030D:  RRF    14,W
030E:  BTFSS  03.0
030F:  GOTO   30D
....................    output_high(RF_CS); 
0310:  BCF    03.5
0311:  MOVF   13,W
0312:  MOVLW  0A
0313:  MOVWF  13
0314:  BSF    03.5
0315:  RRF    14,W
0316:  BTFSS  03.0
0317:  GOTO   315
....................  
0318:  BCF    03.5
0319:  BCF    39.1
031A:  MOVF   39,W
031B:  BSF    03.5
031C:  MOVWF  07
031D:  BCF    03.5
031E:  BSF    07.1
....................    //RX_PW_P2 
....................    //Nº de bytes en Pipe2. 
....................    //10 byte (Direccion emisor y trama). 
....................    output_low(RF_CS); 
....................    spi_write(0x33); 
031F:  BCF    39.1
0320:  MOVF   39,W
0321:  BSF    03.5
0322:  MOVWF  07
0323:  BCF    03.5
0324:  BCF    07.1
....................    spi_write(0x0A); 
0325:  MOVF   13,W
0326:  MOVLW  33
0327:  MOVWF  13
0328:  BSF    03.5
0329:  RRF    14,W
032A:  BTFSS  03.0
032B:  GOTO   329
....................    output_high(RF_CS); 
032C:  BCF    03.5
032D:  MOVF   13,W
032E:  MOVLW  0A
032F:  MOVWF  13
0330:  BSF    03.5
0331:  RRF    14,W
0332:  BTFSS  03.0
0333:  GOTO   331
.................... } 
0334:  BCF    03.5
0335:  BCF    39.1
0336:  MOVF   39,W
0337:  BSF    03.5
0338:  MOVWF  07
0339:  BCF    03.5
033A:  BSF    07.1
033B:  BCF    0A.3
033C:  BCF    0A.4
033D:  GOTO   437 (RETURN)
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                    RF_ON()                         * 
.................... //***************************************************** 
.................... //*Descripción:Esta rutina activa el módulo de        * 
.................... //*radiofrecuencia en modo escucha para poder recibir * 
.................... //*datos enviados a su dirección.                     * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_ON() 
.................... { 
....................  
....................    output_low(RF_CE); 
....................  
033E:  BCF    39.2
033F:  MOVF   39,W
0340:  BSF    03.5
0341:  MOVWF  07
0342:  BCF    03.5
0343:  BCF    07.2
....................    // CONFIG 
....................    //Se activa el modulo, se pone en recepción, 
....................    //se activa el CRC para que utilice 2 bytes. 
....................    output_low(RF_CS); 
....................    spi_write(0x20); 
0344:  BCF    39.1
0345:  MOVF   39,W
0346:  BSF    03.5
0347:  MOVWF  07
0348:  BCF    03.5
0349:  BCF    07.1
....................    spi_write(0x0F); 
034A:  MOVF   13,W
034B:  MOVLW  20
034C:  MOVWF  13
034D:  BSF    03.5
034E:  RRF    14,W
034F:  BTFSS  03.0
0350:  GOTO   34E
....................    output_high(RF_CS); 
0351:  BCF    03.5
0352:  MOVF   13,W
0353:  MOVLW  0F
0354:  MOVWF  13
0355:  BSF    03.5
0356:  RRF    14,W
0357:  BTFSS  03.0
0358:  GOTO   356
....................  
0359:  BCF    03.5
035A:  BCF    39.1
035B:  MOVF   39,W
035C:  BSF    03.5
035D:  MOVWF  07
035E:  BCF    03.5
035F:  BSF    07.1
....................    delay_ms(2); 
....................    output_high(RF_CE); 
0360:  MOVLW  02
0361:  MOVWF  3D
0362:  CALL   10A
....................    delay_us(150); 
0363:  BCF    39.2
0364:  MOVF   39,W
0365:  BSF    03.5
0366:  MOVWF  07
0367:  BCF    03.5
0368:  BSF    07.2
.................... } 
0369:  MOVLW  C7
036A:  MOVWF  77
036B:  DECFSZ 77,F
036C:  GOTO   36B
036D:  GOTO   36E
036E:  BCF    0A.3
036F:  BCF    0A.4
0370:  GOTO   438 (RETURN)
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                 RF_OFF()                         * 
.................... //***************************************************** 
.................... //*Descripción:Este procedimiento desactiva el módulo * 
.................... //*de radiofrecuencia.                                * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_OFF() 
.................... { 
....................    output_low(RF_CE); 
....................  
....................    // CONFIG 
....................    //Se desactiva el modulo 
....................    output_low(RF_CS); 
....................    spi_write(0x20); 
....................    spi_write(0x0C); 
....................    output_high(RF_CS); 
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                 RF_SEND()                         * 
.................... //***************************************************** 
.................... //*Descripción:Esta función envía 8 Bytes de datos a  * 
.................... //*la dirección indicada informando de la correcta    * 
.................... //*recepción en el destinatario.                      * 
.................... //***************************************************** 
.................... //*Variables de entrada:- RF_DATA[]                   * 
.................... //*                     - RF_DIR 
.................... //*Variables de salida: -                             * 
.................... //*Salida:              - 0: Envío correcto (ACK OK)  * 
.................... //*                     - 1: No recepcibido (NO ACK)  * 
.................... //*                     - 2: No enviado               * 
.................... //***************************************************** 
.................... int RF_SEND() 
.................... { 
....................    int i; 
....................    int estado; 
....................  
....................  
....................    if(bit_test(INTCON,7)) 
....................       interRF=1; 
....................    else 
....................       interRF=0; 
....................  
....................    disable_interrupts(GLOBAL); 
....................  
....................    // INICIO 
....................    output_low(RF_CE); 
....................  
....................    //STATUS 
....................    //Reseteo del registro STATUS 
....................    output_low(RF_CS); 
....................    spi_write(0x27); 
....................    spi_write(0x70); 
....................    output_high(RF_CS); 
....................  
....................    // EN_RXADDR 
....................    //Se habilita el Pipe0 para la recepción del ACK 
....................    output_low(RF_CS); 
....................    spi_write(0x22); 
....................    spi_write(0x01); 
....................    output_high(RF_CS); 
....................  
....................    // TX_ADDR 
....................    //Se configura la dirección de transmisión=RF_DIR 
....................    output_low(RF_CS); 
....................    spi_write(0x30); 
....................    spi_write(RF_DIR); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    output_high(RF_CS); 
....................  
....................    // RX_ADDR_P0 
....................    //Para la recepción del ACK se debe configurar el Pipe0 con 
....................    //la misma dirección a trasmitir. 
....................    output_low(RF_CS); 
....................    spi_write(0x2A); 
....................    spi_write(RF_DIR); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    output_high(RF_CS); 
....................  
....................    // RX_ADDR_P1 
....................    //Se mete en RF_DIR la direccion propia. 
....................    //De esta manera el receptor sabe la dirección 
....................    //del transmisor. 
....................    output_low(RF_CS); 
....................    spi_write(0x0B); 
....................    RF_DIR=spi_read(0); 
....................    spi_read(0); 
....................    spi_read(0); 
....................    spi_read(0); 
....................    spi_read(0); 
....................    output_high(RF_CS); 
....................  
....................    // W_TX_PAYLOAD 
....................    //Se manda los datos al transductor 
....................    output_low(RF_CS); 
....................    spi_write(0xA0); 
....................  
....................    DATA_N_SND++; 
....................    spi_write(DATA_N_SND); 
....................    spi_write(RF_DIR); 
....................    for (i=0;i<8;i++) 
....................       spi_write(RF_DATA[i]); 
....................  
....................    output_high(RF_CS); 
....................  
....................    // CONFIG 
....................    //Se pasa a modo transmisión. 
....................    output_low(RF_CS); 
....................    spi_write(0x20); 
....................    spi_write(0x0E); 
....................    output_high(RF_CS); 
....................  
....................    // Pulso de comienzo de envío 
....................    output_high(RF_CE); 
....................    delay_us(15); 
....................    output_low(RF_CE); 
....................  
....................    noRF=0; 
....................  
....................    while (input(RF_IRQ)==1) { 
....................       noRF++; 
....................       //Si no da respuesta en 7ms, no se ha enviado. 
....................       if(noRF==500){ 
....................       break; 
....................          } 
....................    } 
....................  
....................  
....................    // STATUS 
....................    //Lectura del estado en el registro estatus. 
....................    output_low(RF_CS); 
....................    estado=spi_read(0x27); 
....................    spi_write(0x70); 
....................    output_high(RF_CS); 
....................  
....................  
....................    // EN_RXADDR 
....................    //Habilitar los Pipe0,Pipe1 y Pipe2. 
....................    output_low(RF_CS); 
....................    spi_write(0x22); 
....................    spi_write(0x07); 
....................    output_high(RF_CS); 
....................  
....................       // TX_FLUSH 
....................    //Limpieza de la FIFO de salida 
....................    output_low(RF_CS); 
....................    spi_write(0xE1); 
....................    output_high(RF_CS); 
....................  
....................    // CONFIG 
....................    //Paso a modo recepción 
....................    output_low(RF_CS); 
....................    spi_write(0x20); 
....................    spi_write(0x0F); 
....................    output_high(RF_CS); 
....................  
....................    // FIN 
....................    output_high(RF_CE); 
....................  
....................    delay_us(150); 
....................  
....................    //Si no da respuesta en 7ms, no se ha enviado. 
....................    if(noRF==500){ 
....................         if(interRF==1) 
....................         enable_interrupts(GLOBAL); 
....................         clear_interrupt(int_ext); 
....................         return(2); 
....................    } 
....................  
....................    //estado 
....................    //Chequeo de los bit del registro STATUS que indican si se ha recibido 
....................    //ACK y si se ha terminado las retrasmisiones sin ningun ACK. 
....................    if ((bit_test(estado,4)==0) && (bit_test(estado,5)==1)){ 
....................       if(interRF==1) 
....................       enable_interrupts(GLOBAL); 
....................       clear_interrupt(int_ext); 
....................       return(0); 
....................       } 
....................    else{ 
....................       if(interRF==1) 
....................       enable_interrupts(GLOBAL); 
....................       clear_interrupt(int_ext); 
....................       return(1); 
....................       } 
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                 RF_RECEIVE()                      * 
.................... //***************************************************** 
.................... //*Descripción: Esta rutina se encarga de comprobar si* 
.................... //*se ha producido una recepción y de ser así,        * 
.................... //*devuelve la trama recibida.                        * 
.................... //***************************************************** 
.................... //*Variables de entrada:-                             * 
.................... //*Variables de salida: - RF_DATA[]                   * 
.................... //*                     - RF_DIR                      * 
.................... //*Salida:         - 0: Recepción correcta y única    * 
.................... //*                - 1: Recepción correcta y múltiple * 
.................... //*                - 2: No se ha producido recepción  * 
.................... //*                - 3: No se ha producido recepción  * 
.................... //***************************************************** 
.................... int RF_RECEIVE() 
.................... { 
....................  
....................    int i; 
....................    int mas; 
....................    int estado; 
....................  
....................    if (input(RF_IRQ)==1 && RCVNW==0){ 
....................       return (2); 
*
004F:  BSF    03.5
0050:  BSF    06.0
0051:  BCF    03.5
0052:  BTFSS  06.0
0053:  GOTO   059
0054:  BTFSC  2B.1
0055:  GOTO   059
....................       } 
0056:  MOVLW  02
0057:  MOVWF  78
0058:  GOTO   0DE
....................  
....................    //STATUS 
....................    //Lectura y reseteo del registro STATUS 
....................    output_low(RF_CS); 
....................    estado=spi_read(0x27); 
0059:  BCF    39.1
005A:  MOVF   39,W
005B:  BSF    03.5
005C:  MOVWF  07
005D:  BCF    03.5
005E:  BCF    07.1
....................    spi_write(0x70); 
005F:  MOVF   13,W
0060:  MOVLW  27
0061:  MOVWF  13
0062:  BSF    03.5
0063:  RRF    14,W
0064:  BTFSS  03.0
0065:  GOTO   063
0066:  BCF    03.5
0067:  MOVF   13,W
0068:  MOVWF  43
....................    output_high(RF_CS); 
0069:  MOVF   13,W
006A:  MOVLW  70
006B:  MOVWF  13
006C:  BSF    03.5
006D:  RRF    14,W
006E:  BTFSS  03.0
006F:  GOTO   06D
....................  
0070:  BCF    03.5
0071:  BCF    39.1
0072:  MOVF   39,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BSF    07.1
....................    //estado 
....................    //Chequeo de la interrupción de recepción. 
....................    if (bit_test(estado,6)==0 && RCVNW==0){ 
....................       return(3); 
0077:  BTFSC  43.6
0078:  GOTO   07E
0079:  BTFSC  2B.1
007A:  GOTO   07E
....................       } 
007B:  MOVLW  03
007C:  MOVWF  78
007D:  GOTO   0DE
....................  
....................    //R_RX_PAYLOAD 
....................    //Lectura de los datos recibidos. 
....................    output_low(RF_CS); 
....................    spi_write(0x61); 
007E:  BCF    39.1
007F:  MOVF   39,W
0080:  BSF    03.5
0081:  MOVWF  07
0082:  BCF    03.5
0083:  BCF    07.1
....................    DATA_N_RCV=spi_read(0); 
0084:  MOVF   13,W
0085:  MOVLW  61
0086:  MOVWF  13
0087:  BSF    03.5
0088:  RRF    14,W
0089:  BTFSS  03.0
008A:  GOTO   088
....................    RF_DIR=spi_read(0); 
008B:  BCF    03.5
008C:  MOVF   13,W
008D:  CLRF   13
008E:  BSF    03.5
008F:  RRF    14,W
0090:  BTFSS  03.0
0091:  GOTO   08F
0092:  BCF    03.5
0093:  MOVF   13,W
0094:  MOVWF  2F
....................    for (i=0;i<8;i++) 
0095:  MOVF   13,W
0096:  CLRF   13
0097:  BSF    03.5
0098:  RRF    14,W
0099:  BTFSS  03.0
009A:  GOTO   098
009B:  BCF    03.5
009C:  MOVF   13,W
009D:  MOVWF  38
....................    { 
009E:  CLRF   41
009F:  MOVF   41,W
00A0:  SUBLW  07
00A1:  BTFSS  03.0
00A2:  GOTO   0B2
....................       RF_DATA[i]=spi_read(0); 
....................    } 
00A3:  MOVLW  30
00A4:  ADDWF  41,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   13,W
00A8:  CLRF   13
00A9:  BSF    03.5
00AA:  RRF    14,W
00AB:  BTFSS  03.0
00AC:  GOTO   0AA
00AD:  BCF    03.5
00AE:  MOVF   13,W
00AF:  MOVWF  00
00B0:  INCF   41,F
00B1:  GOTO   09F
....................    output_high(RF_CS); 
....................  
00B2:  BCF    39.1
00B3:  MOVF   39,W
00B4:  BSF    03.5
00B5:  MOVWF  07
00B6:  BCF    03.5
00B7:  BSF    07.1
....................    //FIFO_STATUS 
....................    //Comprobación del estado de la FIFO de 
....................    //recepción para comprobar si hay más datos 
....................    output_low(RF_CS); 
....................    spi_write(0x17); 
00B8:  BCF    39.1
00B9:  MOVF   39,W
00BA:  BSF    03.5
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  BCF    07.1
....................    mas=spi_read(0); 
00BE:  MOVF   13,W
00BF:  MOVLW  17
00C0:  MOVWF  13
00C1:  BSF    03.5
00C2:  RRF    14,W
00C3:  BTFSS  03.0
00C4:  GOTO   0C2
....................    output_high(RF_CS); 
00C5:  BCF    03.5
00C6:  MOVF   13,W
00C7:  CLRF   13
00C8:  BSF    03.5
00C9:  RRF    14,W
00CA:  BTFSS  03.0
00CB:  GOTO   0C9
00CC:  BCF    03.5
00CD:  MOVF   13,W
00CE:  MOVWF  42
....................  
00CF:  BCF    39.1
00D0:  MOVF   39,W
00D1:  BSF    03.5
00D2:  MOVWF  07
00D3:  BCF    03.5
00D4:  BSF    07.1
....................    if (bit_test(mas,0)==0){ 
....................       RCVNW=1; 
00D5:  BTFSC  42.0
00D6:  GOTO   0DB
....................       return(1); 
00D7:  BSF    2B.1
....................    } 
00D8:  MOVLW  01
00D9:  MOVWF  78
00DA:  GOTO   0DE
....................       RCVNW=0; 
....................       return(0); 
00DB:  BCF    2B.1
.................... } 
00DC:  MOVLW  00
00DD:  MOVWF  78
00DE:  RETURN
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #use rs232(uart1, baud=9600)//usart1 -->ajuste de XMIT y RCV para la USART 1  
.................... #define LED PIN_B1 
.................... #byte porta=0x05           // Dirección del puerto A. 
.................... #int_ext                   // Interrupción del módulo RF. 
....................  
.................... void IntRB0() 
.................... { 
....................    int8 ret1; 
....................    ret1 = RF_RECEIVE(); 
00DF:  CALL   04F
00E0:  MOVF   78,W
00E1:  MOVWF  40
....................    if ( (ret1 == 0) || (ret1 == 1) )         // Tanto si hay recepción simple o múltiple, leer datos. 
00E2:  MOVF   40,F
00E3:  BTFSC  03.2
00E4:  GOTO   0E7
00E5:  DECFSZ 40,W
00E6:  GOTO   0FE
....................    { 
....................       do 
....................       {     
....................          porta=RF_DATA[0];                   // El puerto A contendrá el valor que le llegue del emisor, a través de RF_DATA[0]. 
00E7:  MOVF   30,W
00E8:  MOVWF  05
....................          printf("\n %c",RF_DATA[2]); 
00E9:  MOVLW  0A
00EA:  BTFSS  0C.4
00EB:  GOTO   0EA
00EC:  MOVWF  19
00ED:  MOVLW  20
00EE:  BTFSS  0C.4
00EF:  GOTO   0EE
00F0:  MOVWF  19
00F1:  MOVF   32,W
00F2:  BTFSS  0C.4
00F3:  GOTO   0F2
00F4:  MOVWF  19
....................          ret1 = RF_RECEIVE();                // "ret1" nos dirá si hay recepción simple, múltiple o no hay datos para leer. 
00F5:  CALL   04F
00F6:  MOVF   78,W
00F7:  MOVWF  40
....................       }while ( (ret1 == 0) || (ret1 == 1) ); // Mientras haya datos para leer, seguir leyendo. 
00F8:  MOVF   40,F
00F9:  BTFSC  03.2
00FA:  GOTO   0E7
00FB:  DECFSZ 40,W
00FC:  GOTO   0FE
00FD:  GOTO   0E7
....................    }   
00FE:  BCF    0B.1
00FF:  BCF    0A.3
0100:  BCF    0A.4
0101:  GOTO   02B
.................... } 
....................  
.................... void main() {  
*
03CB:  MOVF   03,W
03CC:  ANDLW  1F
03CD:  MOVWF  03
03CE:  BCF    2B.1
03CF:  CLRF   2E
03D0:  CLRF   2F
03D1:  MOVLW  FF
03D2:  MOVWF  39
03D3:  BSF    03.5
03D4:  BSF    03.6
03D5:  BSF    07.3
03D6:  MOVLW  A0
03D7:  BCF    03.6
03D8:  MOVWF  19
03D9:  MOVLW  01
03DA:  MOVWF  1A
03DB:  MOVLW  A6
03DC:  MOVWF  18
03DD:  MOVLW  90
03DE:  BCF    03.5
03DF:  MOVWF  18
03E0:  CLRF   3B
03E1:  CLRF   3A
03E2:  BSF    03.5
03E3:  BSF    03.6
03E4:  MOVF   09,W
03E5:  ANDLW  C0
03E6:  MOVWF  09
03E7:  BCF    03.6
03E8:  BCF    1F.4
03E9:  BCF    1F.5
03EA:  MOVLW  00
03EB:  BSF    03.6
03EC:  MOVWF  08
03ED:  BCF    03.5
03EE:  CLRF   07
03EF:  CLRF   08
03F0:  CLRF   09
03F1:  BCF    03.7
....................     output_low(LED); 
*
03FF:  BSF    03.5
0400:  BCF    06.1
0401:  BCF    03.5
0402:  BCF    06.1
....................     delay_ms(1000); 
0403:  MOVLW  04
0404:  MOVWF  3C
0405:  MOVLW  FA
0406:  MOVWF  3D
0407:  CALL   10A
0408:  DECFSZ 3C,F
0409:  GOTO   405
....................     output_high(LED); 
040A:  BSF    03.5
040B:  BCF    06.1
040C:  BCF    03.5
040D:  BSF    06.1
....................     delay_ms(1000); 
040E:  MOVLW  04
040F:  MOVWF  3C
0410:  MOVLW  FA
0411:  MOVWF  3D
0412:  CALL   10A
0413:  DECFSZ 3C,F
0414:  GOTO   410
....................     output_low(LED); 
0415:  BSF    03.5
0416:  BCF    06.1
0417:  BCF    03.5
0418:  BCF    06.1
....................     delay_ms(1000); 
0419:  MOVLW  04
041A:  MOVWF  3C
041B:  MOVLW  FA
041C:  MOVWF  3D
041D:  CALL   10A
041E:  DECFSZ 3C,F
041F:  GOTO   41B
....................     output_high(LED); 
0420:  BSF    03.5
0421:  BCF    06.1
0422:  BCF    03.5
0423:  BSF    06.1
....................     delay_ms(1000);    
0424:  MOVLW  04
0425:  MOVWF  3C
0426:  MOVLW  FA
0427:  MOVWF  3D
0428:  CALL   10A
0429:  DECFSZ 3C,F
042A:  GOTO   426
....................     set_tris_a(0b000000);     // Todo el puerto A como salida. 
042B:  MOVLW  00
042C:  BSF    03.5
042D:  MOVWF  05
....................     porta=0;                  // Inicialmente lo ponemos a cero. 
042E:  BCF    03.5
042F:  CLRF   05
....................     RF_INT_EN();              // Habilitar interrupción RB0/INT. 
0430:  GOTO   11F
....................     RF_CONFIG_SPI();          // Configurar módulos SPI del PIC. 
0431:  GOTO   12D
....................     RF_CONFIG(0x40,0x08);     // Configurar módulo RF (canal y dirección). 
0432:  MOVLW  40
0433:  MOVWF  3C
0434:  MOVLW  08
0435:  MOVWF  3D
0436:  GOTO   14B
....................     RF_ON();                  // Activar el módulo RF. 
0437:  GOTO   33E
....................     printf("configurado! \n"); 
0438:  MOVLW  02
0439:  BSF    03.6
043A:  MOVWF  0D
043B:  MOVLW  01
043C:  MOVWF  0F
043D:  BCF    03.6
043E:  GOTO   371
....................    // Bucle infinito.  
....................  while(TRUE)  
....................  {  
043F:  GOTO   43F
....................     //putc('h');//Envía el caracter vía serie por la USART del PIC  
....................     // delay_ms(1000); 
....................  
....................  }  
....................   
.................... } 
0440:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
