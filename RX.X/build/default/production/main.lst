CCS PCM C Compiler, Version 5.015, 5967               02-abr-17 13:36

               Filename:   E:\script sensores\RX.X\build\default\production\main.lst

               ROM used:   1185 words (14%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           41 (11%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   422
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   0F4
.................... #include <16F886.h>  
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
*
00DF:  MOVF   42,W
00E0:  CLRF   78
00E1:  SUBWF  41,W
00E2:  BTFSC  03.0
00E3:  GOTO   0E7
00E4:  MOVF   41,W
00E5:  MOVWF  77
00E6:  GOTO   0F3
00E7:  CLRF   77
00E8:  MOVLW  08
00E9:  MOVWF  43
00EA:  RLF    41,F
00EB:  RLF    77,F
00EC:  MOVF   42,W
00ED:  SUBWF  77,W
00EE:  BTFSC  03.0
00EF:  MOVWF  77
00F0:  RLF    78,F
00F1:  DECFSZ 43,F
00F2:  GOTO   0EA
00F3:  RETURN
*
0116:  MOVF   3F,W
0117:  MOVWF  41
0118:  MOVLW  64
0119:  MOVWF  42
011A:  CALL   0DF
011B:  MOVF   77,W
011C:  MOVWF  3F
011D:  MOVF   78,W
011E:  MOVLW  30
011F:  BTFSS  03.2
0120:  GOTO   128
0121:  BTFSS  40.1
0122:  GOTO   130
0123:  BTFSC  40.3
0124:  GOTO   130
0125:  BTFSC  40.4
0126:  MOVLW  20
0127:  GOTO   12B
0128:  BCF    40.3
0129:  BCF    40.4
012A:  BSF    40.0
012B:  ADDWF  78,F
012C:  MOVF   78,W
012D:  BTFSS  0C.4
012E:  GOTO   12D
012F:  MOVWF  19
0130:  MOVF   3F,W
0131:  MOVWF  41
0132:  MOVLW  0A
0133:  MOVWF  42
0134:  CALL   0DF
0135:  MOVF   77,W
0136:  MOVWF  3F
0137:  MOVF   78,W
0138:  MOVLW  30
0139:  BTFSS  03.2
013A:  GOTO   141
013B:  BTFSC  40.3
013C:  GOTO   146
013D:  BTFSS  40.0
013E:  GOTO   146
013F:  BTFSC  40.4
0140:  MOVLW  20
0141:  ADDWF  78,F
0142:  MOVF   78,W
0143:  BTFSS  0C.4
0144:  GOTO   143
0145:  MOVWF  19
0146:  MOVLW  30
0147:  ADDWF  3F,F
0148:  MOVF   3F,W
0149:  BTFSS  0C.4
014A:  GOTO   149
014B:  MOVWF  19
*
0159:  DATA E3,37
015A:  DATA 6E,33
015B:  DATA E9,33
015C:  DATA 75,39
015D:  DATA 61,32
015E:  DATA EF,10
015F:  DATA 20,05
0160:  DATA 00,00
*
03C8:  MOVF   0B,W
03C9:  MOVWF  3A
03CA:  BCF    0B.7
03CB:  BSF    03.5
03CC:  BSF    03.6
03CD:  BSF    0C.7
03CE:  BSF    0C.0
03CF:  NOP
03D0:  NOP
03D1:  BCF    03.5
03D2:  BCF    03.6
03D3:  BTFSC  3A.7
03D4:  BSF    0B.7
03D5:  BSF    03.6
03D6:  MOVF   0C,W
03D7:  ANDLW  7F
03D8:  BTFSC  03.2
03D9:  GOTO   41E
03DA:  BCF    03.6
03DB:  MOVWF  3A
03DC:  BSF    03.6
03DD:  MOVF   0D,W
03DE:  BCF    03.6
03DF:  MOVWF  3B
03E0:  BSF    03.6
03E1:  MOVF   0F,W
03E2:  BCF    03.6
03E3:  MOVWF  3C
03E4:  MOVF   3A,W
03E5:  BTFSS  0C.4
03E6:  GOTO   3E5
03E7:  MOVWF  19
03E8:  MOVF   3B,W
03E9:  BSF    03.6
03EA:  MOVWF  0D
03EB:  BCF    03.6
03EC:  MOVF   3C,W
03ED:  BSF    03.6
03EE:  MOVWF  0F
03EF:  BCF    03.6
03F0:  MOVF   0B,W
03F1:  MOVWF  3D
03F2:  BCF    0B.7
03F3:  BSF    03.5
03F4:  BSF    03.6
03F5:  BSF    0C.7
03F6:  BSF    0C.0
03F7:  NOP
03F8:  NOP
03F9:  BCF    03.5
03FA:  BCF    03.6
03FB:  BTFSC  3D.7
03FC:  BSF    0B.7
03FD:  BSF    03.6
03FE:  RLF    0C,W
03FF:  RLF    0E,W
0400:  ANDLW  7F
0401:  BTFSC  03.2
0402:  GOTO   41E
0403:  BCF    03.6
0404:  MOVWF  3A
0405:  BSF    03.6
0406:  MOVF   0D,W
0407:  BCF    03.6
0408:  MOVWF  3B
0409:  BSF    03.6
040A:  MOVF   0F,W
040B:  BCF    03.6
040C:  MOVWF  3C
040D:  MOVF   3A,W
040E:  BTFSS  0C.4
040F:  GOTO   40E
0410:  MOVWF  19
0411:  MOVF   3B,W
0412:  BSF    03.6
0413:  MOVWF  0D
0414:  BCF    03.6
0415:  MOVF   3C,W
0416:  BSF    03.6
0417:  MOVWF  0F
0418:  INCF   0D,F
0419:  BTFSC  03.2
041A:  INCF   0F,F
041B:  BCF    03.6
041C:  GOTO   3C8
041D:  BSF    03.6
041E:  BCF    03.6
041F:  BCF    0A.3
0420:  BCF    0A.4
0421:  GOTO   49F (RETURN)
....................  
.................... #list 
....................  
.................... #FUSES NOWDT, XT, NOPUT, NOPROTECT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG  
.................... #use delay(crystal=16MHz) 
*
0161:  MOVLW  3B
0162:  MOVWF  04
0163:  BCF    03.7
0164:  MOVF   00,W
0165:  BTFSC  03.2
0166:  GOTO   175
0167:  MOVLW  05
0168:  MOVWF  78
0169:  CLRF   77
016A:  DECFSZ 77,F
016B:  GOTO   16A
016C:  DECFSZ 78,F
016D:  GOTO   169
016E:  MOVLW  2E
016F:  MOVWF  77
0170:  DECFSZ 77,F
0171:  GOTO   170
0172:  GOTO   173
0173:  DECFSZ 00,F
0174:  GOTO   167
0175:  RETURN
.................... #include "lib_rf2gh4_10.h" 
.................... //******************************************************************************** 
.................... //*    lib_rf2gh4_10.h                                                           * 
.................... //*     version: 1.0                                                             * 
.................... //*     Esta librería contiene las funciones necesarias para gestionar el módulo * 
.................... //*    RF2GH4 con programas del compilador CCS                                   * 
.................... //*    Copyright (C) 2007  Bizintek Innova S.L.                                  * 
.................... //******************************************************************************** 
.................... //*    This program is free software; you can redistribute it and/or modify      * 
.................... //*    it under the terms of the GNU General Public License as published by      * 
.................... //*    the Free Software Foundation; either version 2 of the License, or         * 
.................... //*    (at your option) any later version.                                       * 
.................... //*                                                                              * 
.................... //*    This program is distributed in the hope that it will be useful,           * 
.................... //*    but WITHOUT ANY WARRANTY; without even the implied warranty of            * 
.................... //*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             * 
.................... //*    GNU General Public License for more details.                              * 
.................... //*                                                                              * 
.................... //*    You should have received a copy of the GNU General Public License along   * 
.................... //*    with this program; if not, write to the Free Software Foundation, Inc.,   * 
.................... //*    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               * 
.................... //******************************************************************************** 
....................  
....................  
.................... //******************** 
.................... //*   DEFINICIONES   * 
.................... //******************** 
....................  
.................... // PORTB 
.................... #define RF_IRQ        PIN_B0 
.................... #define RF_IRQ_TRIS   TRISB,0 
....................  
.................... // PORTC 
.................... #define   RF_CS       PIN_C1 
.................... #define   RF_CE       PIN_C2 
.................... #define   SCK         PIN_C3 
.................... #define   SDI         PIN_C4 
.................... #define   SDO         PIN_C5 
....................                        
.................... #define   RF_CS_TRIS  TRISC,1 
.................... #define   RF_CE_TRIS  TRISC,2 
.................... #define   SCK_TRIS    TRISC,3 
.................... #define   SDI_TRIS    TRISC,4 
.................... #define   SDO_TRIS    TRISC,5 
....................  
....................  
....................  
.................... //***************** 
.................... //*   VARIABLES   * 
.................... //***************** 
.................... #BYTE TRISA     =  0x85 
.................... #BYTE TRISB     =  0x86 
.................... #BYTE TRISC     =  0x87 
.................... #BYTE INTCON    =  0x0B 
....................  
.................... //Variables internas 
.................... static int1        interRF; 
*
0447:  BCF    03.6
0448:  BCF    2B.0
.................... static int16       noRF; 
0449:  CLRF   2C
044A:  CLRF   2D
.................... static int1        RCVNW=0; 
.................... static int8        DATA_N_SND=0; 
.................... static int8        DATA_N_RCV=0; 
....................  
.................... //Variables configurables 
.................... static int8        RF_DATA[8]; 
044B:  CLRF   30
044C:  CLRF   31
044D:  CLRF   32
044E:  CLRF   33
044F:  CLRF   34
0450:  CLRF   35
0451:  CLRF   36
0452:  CLRF   37
.................... static int8        RF_DIR; 
0453:  CLRF   38
....................  
....................  
.................... //************** 
.................... //*   CÓDIGO   * 
.................... //************** 
....................  
.................... //***************************************************** 
.................... //*               RF_CONFIG_SPI()                     * 
.................... //***************************************************** 
.................... //*Descripción: La función configura el módulo SPI del* 
.................... //*microcontrolador.En ella se especifica como salida * 
.................... //*SDO y como entrada SDI entre otros parámetros del  * 
.................... //*protocolo SPI.                                     * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_CONFIG_SPI() 
.................... { 
....................    //Configuración I/O. 
....................    bit_clear(SCK_TRIS); 
*
0184:  BSF    03.5
0185:  BCF    07.3
....................    bit_set(SDI_TRIS); 
0186:  BSF    07.4
....................    bit_clear(SDO_TRIS); 
0187:  BCF    07.5
....................  
....................    //Configuración módulo comunicaciones. 
....................    setup_spi(SPI_MASTER|SPI_L_TO_H|SPI_XMIT_L_TO_H 
....................    |SPI_CLK_DIV_4|SPI_SAMPLE_AT_END); 
0188:  BCF    03.5
0189:  BCF    14.5
018A:  BCF    39.5
018B:  MOVF   39,W
018C:  BSF    03.5
018D:  MOVWF  07
018E:  BCF    03.5
018F:  BSF    39.4
0190:  MOVF   39,W
0191:  BSF    03.5
0192:  MOVWF  07
0193:  BCF    03.5
0194:  BCF    39.3
0195:  MOVF   39,W
0196:  BSF    03.5
0197:  MOVWF  07
0198:  MOVLW  20
0199:  BCF    03.5
019A:  MOVWF  14
019B:  MOVLW  C0
019C:  BSF    03.5
019D:  MOVWF  14
019E:  BCF    03.5
019F:  BCF    0A.3
01A0:  BCF    0A.4
01A1:  GOTO   492 (RETURN)
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                    RF_INT_EN()                    * 
.................... //***************************************************** 
.................... //*Descripción:Se encarga de habilitar la interrupción* 
.................... //*externa (RB0) utilizada por el módulo de RF en la  * 
.................... //*recepción de datos.                                * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_INT_EN() 
.................... { 
....................    //Habilitar interrupciones externas con flanco de 
....................    //bajada. 
....................    disable_interrupts(global); 
*
0176:  BCF    0B.6
0177:  BCF    0B.7
0178:  BTFSC  0B.7
0179:  GOTO   177
....................    enable_interrupts(int_ext); 
017A:  BSF    0B.4
....................    ext_int_edge( H_TO_L ); 
017B:  BSF    03.5
017C:  BCF    01.6
....................    bit_set(RF_IRQ_TRIS); 
017D:  BSF    06.0
....................    enable_interrupts(global); 
017E:  MOVLW  C0
017F:  BCF    03.5
0180:  IORWF  0B,F
0181:  BCF    0A.3
0182:  BCF    0A.4
0183:  GOTO   491 (RETURN)
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*        RF_CONFIG(int canal, int dir)              * 
.................... //***************************************************** 
.................... //*Descripción:Esta función se encarga de configurar  * 
.................... //*el transceptor habilitando su propia dirección de  * 
.................... //*escucha y el canal entre otros parámetros.         * 
.................... //***************************************************** 
.................... //*Variables de entrada:- Canal                       * 
.................... //*                     - Direccion                   * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_CONFIG(int canal, int dir) 
.................... { 
....................  
....................    bit_clear(RF_CS_TRIS); 
*
01A2:  BSF    03.5
01A3:  BCF    07.1
....................    bit_set(RF_IRQ_TRIS); 
01A4:  BSF    06.0
....................    bit_clear(RF_CE_TRIS); 
01A5:  BCF    07.2
....................  
....................    output_low(RF_CE); 
01A6:  BCF    03.5
01A7:  BCF    39.2
01A8:  MOVF   39,W
01A9:  BSF    03.5
01AA:  MOVWF  07
01AB:  BCF    03.5
01AC:  BCF    07.2
....................  
....................    // TX_ADDR (0xFF) 
....................    //Configuración de la dirección de envio aleatoria. 
....................    //En la función de enviar se configura la direccion 
....................    //deseada por el usuario. 
....................    output_low(RF_CS); 
01AD:  BCF    39.1
01AE:  MOVF   39,W
01AF:  BSF    03.5
01B0:  MOVWF  07
01B1:  BCF    03.5
01B2:  BCF    07.1
....................    spi_write(0x30); 
01B3:  MOVF   13,W
01B4:  MOVLW  30
01B5:  MOVWF  13
01B6:  BSF    03.5
01B7:  RRF    14,W
01B8:  BTFSS  03.0
01B9:  GOTO   1B7
....................    spi_write(0xFF); 
01BA:  BCF    03.5
01BB:  MOVF   13,W
01BC:  MOVLW  FF
01BD:  MOVWF  13
01BE:  BSF    03.5
01BF:  RRF    14,W
01C0:  BTFSS  03.0
01C1:  GOTO   1BF
....................    spi_write(0xC2); 
01C2:  BCF    03.5
01C3:  MOVF   13,W
01C4:  MOVLW  C2
01C5:  MOVWF  13
01C6:  BSF    03.5
01C7:  RRF    14,W
01C8:  BTFSS  03.0
01C9:  GOTO   1C7
....................    spi_write(0xC2); 
01CA:  BCF    03.5
01CB:  MOVF   13,W
01CC:  MOVLW  C2
01CD:  MOVWF  13
01CE:  BSF    03.5
01CF:  RRF    14,W
01D0:  BTFSS  03.0
01D1:  GOTO   1CF
....................    spi_write(0xC2); 
01D2:  BCF    03.5
01D3:  MOVF   13,W
01D4:  MOVLW  C2
01D5:  MOVWF  13
01D6:  BSF    03.5
01D7:  RRF    14,W
01D8:  BTFSS  03.0
01D9:  GOTO   1D7
....................    spi_write(0xC2); 
01DA:  BCF    03.5
01DB:  MOVF   13,W
01DC:  MOVLW  C2
01DD:  MOVWF  13
01DE:  BSF    03.5
01DF:  RRF    14,W
01E0:  BTFSS  03.0
01E1:  GOTO   1DF
....................    output_high(RF_CS); 
01E2:  BCF    03.5
01E3:  BCF    39.1
01E4:  MOVF   39,W
01E5:  BSF    03.5
01E6:  MOVWF  07
01E7:  BCF    03.5
01E8:  BSF    07.1
....................  
....................    // RX_ADDR_P0 (0xFF) ACK 
....................    //Configuración de la direccióndel Pipe0 para la 
....................    //recepción de ACK. 
....................    output_low(RF_CS); 
01E9:  BCF    39.1
01EA:  MOVF   39,W
01EB:  BSF    03.5
01EC:  MOVWF  07
01ED:  BCF    03.5
01EE:  BCF    07.1
....................    spi_write(0x2A); 
01EF:  MOVF   13,W
01F0:  MOVLW  2A
01F1:  MOVWF  13
01F2:  BSF    03.5
01F3:  RRF    14,W
01F4:  BTFSS  03.0
01F5:  GOTO   1F3
....................    spi_write(0xFF); 
01F6:  BCF    03.5
01F7:  MOVF   13,W
01F8:  MOVLW  FF
01F9:  MOVWF  13
01FA:  BSF    03.5
01FB:  RRF    14,W
01FC:  BTFSS  03.0
01FD:  GOTO   1FB
....................    spi_write(0xC2); 
01FE:  BCF    03.5
01FF:  MOVF   13,W
0200:  MOVLW  C2
0201:  MOVWF  13
0202:  BSF    03.5
0203:  RRF    14,W
0204:  BTFSS  03.0
0205:  GOTO   203
....................    spi_write(0xC2); 
0206:  BCF    03.5
0207:  MOVF   13,W
0208:  MOVLW  C2
0209:  MOVWF  13
020A:  BSF    03.5
020B:  RRF    14,W
020C:  BTFSS  03.0
020D:  GOTO   20B
....................    spi_write(0xC2); 
020E:  BCF    03.5
020F:  MOVF   13,W
0210:  MOVLW  C2
0211:  MOVWF  13
0212:  BSF    03.5
0213:  RRF    14,W
0214:  BTFSS  03.0
0215:  GOTO   213
....................    spi_write(0xC2); 
0216:  BCF    03.5
0217:  MOVF   13,W
0218:  MOVLW  C2
0219:  MOVWF  13
021A:  BSF    03.5
021B:  RRF    14,W
021C:  BTFSS  03.0
021D:  GOTO   21B
....................    output_high(RF_CS); 
021E:  BCF    03.5
021F:  BCF    39.1
0220:  MOVF   39,W
0221:  BSF    03.5
0222:  MOVWF  07
0223:  BCF    03.5
0224:  BSF    07.1
....................  
....................    // RX_ADDR_P1 (dir) 
....................    //Configuración de la direccióndel Pipe1 para la 
....................    //recepción de tramas. 
....................    output_low(RF_CS); 
0225:  BCF    39.1
0226:  MOVF   39,W
0227:  BSF    03.5
0228:  MOVWF  07
0229:  BCF    03.5
022A:  BCF    07.1
....................    spi_write(0x2B); 
022B:  MOVF   13,W
022C:  MOVLW  2B
022D:  MOVWF  13
022E:  BSF    03.5
022F:  RRF    14,W
0230:  BTFSS  03.0
0231:  GOTO   22F
....................    spi_write(dir); 
0232:  BCF    03.5
0233:  MOVF   3B,W
0234:  MOVWF  13
0235:  BSF    03.5
0236:  RRF    14,W
0237:  BTFSS  03.0
0238:  GOTO   236
....................    spi_write(0xC2); 
0239:  BCF    03.5
023A:  MOVF   13,W
023B:  MOVLW  C2
023C:  MOVWF  13
023D:  BSF    03.5
023E:  RRF    14,W
023F:  BTFSS  03.0
0240:  GOTO   23E
....................    spi_write(0xC2); 
0241:  BCF    03.5
0242:  MOVF   13,W
0243:  MOVLW  C2
0244:  MOVWF  13
0245:  BSF    03.5
0246:  RRF    14,W
0247:  BTFSS  03.0
0248:  GOTO   246
....................    spi_write(0xC2); 
0249:  BCF    03.5
024A:  MOVF   13,W
024B:  MOVLW  C2
024C:  MOVWF  13
024D:  BSF    03.5
024E:  RRF    14,W
024F:  BTFSS  03.0
0250:  GOTO   24E
....................    spi_write(0xC2); 
0251:  BCF    03.5
0252:  MOVF   13,W
0253:  MOVLW  C2
0254:  MOVWF  13
0255:  BSF    03.5
0256:  RRF    14,W
0257:  BTFSS  03.0
0258:  GOTO   256
....................    output_high(RF_CS); 
0259:  BCF    03.5
025A:  BCF    39.1
025B:  MOVF   39,W
025C:  BSF    03.5
025D:  MOVWF  07
025E:  BCF    03.5
025F:  BSF    07.1
....................  
....................    // RX_ADDR_P2 (0x00) BROADCAST 
....................    //Configuración de la direccióndel Pipe2 para la 
....................    //recepción de tramas 
....................    output_low(RF_CS); 
0260:  BCF    39.1
0261:  MOVF   39,W
0262:  BSF    03.5
0263:  MOVWF  07
0264:  BCF    03.5
0265:  BCF    07.1
....................    spi_write(0x2C); 
0266:  MOVF   13,W
0267:  MOVLW  2C
0268:  MOVWF  13
0269:  BSF    03.5
026A:  RRF    14,W
026B:  BTFSS  03.0
026C:  GOTO   26A
....................    spi_write(0x00); 
026D:  BCF    03.5
026E:  MOVF   13,W
026F:  CLRF   13
0270:  BSF    03.5
0271:  RRF    14,W
0272:  BTFSS  03.0
0273:  GOTO   271
....................    output_high(RF_CS); 
0274:  BCF    03.5
0275:  BCF    39.1
0276:  MOVF   39,W
0277:  BSF    03.5
0278:  MOVWF  07
0279:  BCF    03.5
027A:  BSF    07.1
....................  
....................    // EN_AA 
....................    //Habilitar AutoAck en los Pipe0,Pipe1 y Pipe2. 
....................    output_low(RF_CS); 
027B:  BCF    39.1
027C:  MOVF   39,W
027D:  BSF    03.5
027E:  MOVWF  07
027F:  BCF    03.5
0280:  BCF    07.1
....................    spi_write(0x21); 
0281:  MOVF   13,W
0282:  MOVLW  21
0283:  MOVWF  13
0284:  BSF    03.5
0285:  RRF    14,W
0286:  BTFSS  03.0
0287:  GOTO   285
....................    spi_write(0x07); 
0288:  BCF    03.5
0289:  MOVF   13,W
028A:  MOVLW  07
028B:  MOVWF  13
028C:  BSF    03.5
028D:  RRF    14,W
028E:  BTFSS  03.0
028F:  GOTO   28D
....................    output_high(RF_CS); 
0290:  BCF    03.5
0291:  BCF    39.1
0292:  MOVF   39,W
0293:  BSF    03.5
0294:  MOVWF  07
0295:  BCF    03.5
0296:  BSF    07.1
....................  
....................    // EN_RXADDR 
....................    //Habilitar los Pipe0,Pipe1 y Pipe2. 
....................    output_low(RF_CS); 
0297:  BCF    39.1
0298:  MOVF   39,W
0299:  BSF    03.5
029A:  MOVWF  07
029B:  BCF    03.5
029C:  BCF    07.1
....................    spi_write(0x22); 
029D:  MOVF   13,W
029E:  MOVLW  22
029F:  MOVWF  13
02A0:  BSF    03.5
02A1:  RRF    14,W
02A2:  BTFSS  03.0
02A3:  GOTO   2A1
....................    spi_write(0x07); 
02A4:  BCF    03.5
02A5:  MOVF   13,W
02A6:  MOVLW  07
02A7:  MOVWF  13
02A8:  BSF    03.5
02A9:  RRF    14,W
02AA:  BTFSS  03.0
02AB:  GOTO   2A9
....................    output_high(RF_CS); 
02AC:  BCF    03.5
02AD:  BCF    39.1
02AE:  MOVF   39,W
02AF:  BSF    03.5
02B0:  MOVWF  07
02B1:  BCF    03.5
02B2:  BSF    07.1
....................  
....................    // SETUP_AW 
....................    //Configuración de la longitud de las direcciones. 
....................    //Direcciones de 5 bytes. 
....................    output_low(RF_CS); 
02B3:  BCF    39.1
02B4:  MOVF   39,W
02B5:  BSF    03.5
02B6:  MOVWF  07
02B7:  BCF    03.5
02B8:  BCF    07.1
....................    spi_write(0x23); 
02B9:  MOVF   13,W
02BA:  MOVLW  23
02BB:  MOVWF  13
02BC:  BSF    03.5
02BD:  RRF    14,W
02BE:  BTFSS  03.0
02BF:  GOTO   2BD
....................    spi_write(0x03); 
02C0:  BCF    03.5
02C1:  MOVF   13,W
02C2:  MOVLW  03
02C3:  MOVWF  13
02C4:  BSF    03.5
02C5:  RRF    14,W
02C6:  BTFSS  03.0
02C7:  GOTO   2C5
....................    output_high(RF_CS); 
02C8:  BCF    03.5
02C9:  BCF    39.1
02CA:  MOVF   39,W
02CB:  BSF    03.5
02CC:  MOVWF  07
02CD:  BCF    03.5
02CE:  BSF    07.1
....................  
....................    //SETUP_RETR 
....................    //Configuración de las retrasmisiones en la transmisión. 
....................    //Diez retransmisiones cada 336us. 
....................    output_low(RF_CS); 
02CF:  BCF    39.1
02D0:  MOVF   39,W
02D1:  BSF    03.5
02D2:  MOVWF  07
02D3:  BCF    03.5
02D4:  BCF    07.1
....................    spi_write(0x24); 
02D5:  MOVF   13,W
02D6:  MOVLW  24
02D7:  MOVWF  13
02D8:  BSF    03.5
02D9:  RRF    14,W
02DA:  BTFSS  03.0
02DB:  GOTO   2D9
....................    spi_write(0x0A); 
02DC:  BCF    03.5
02DD:  MOVF   13,W
02DE:  MOVLW  0A
02DF:  MOVWF  13
02E0:  BSF    03.5
02E1:  RRF    14,W
02E2:  BTFSS  03.0
02E3:  GOTO   2E1
....................    output_high(RF_CS); 
02E4:  BCF    03.5
02E5:  BCF    39.1
02E6:  MOVF   39,W
02E7:  BSF    03.5
02E8:  MOVWF  07
02E9:  BCF    03.5
02EA:  BSF    07.1
....................  
....................    //RF_CH 
....................    //Configuración del canal. 
....................    //Canal elegido por el usuario (0x01 - 0x7F). 
....................    output_low(RF_CS); 
02EB:  BCF    39.1
02EC:  MOVF   39,W
02ED:  BSF    03.5
02EE:  MOVWF  07
02EF:  BCF    03.5
02F0:  BCF    07.1
....................    spi_write(0x25); 
02F1:  MOVF   13,W
02F2:  MOVLW  25
02F3:  MOVWF  13
02F4:  BSF    03.5
02F5:  RRF    14,W
02F6:  BTFSS  03.0
02F7:  GOTO   2F5
....................    spi_write(canal); 
02F8:  BCF    03.5
02F9:  MOVF   3A,W
02FA:  MOVWF  13
02FB:  BSF    03.5
02FC:  RRF    14,W
02FD:  BTFSS  03.0
02FE:  GOTO   2FC
....................    output_high(RF_CS); 
02FF:  BCF    03.5
0300:  BCF    39.1
0301:  MOVF   39,W
0302:  BSF    03.5
0303:  MOVWF  07
0304:  BCF    03.5
0305:  BSF    07.1
....................  
....................    //RF_SETUP 
....................    //Configuración aspectos RF. 
....................    //Ganancia máxima de LNA, 0dBm potencia de salida y 1Mbps de velocidad. 
....................    output_low(RF_CS); 
0306:  BCF    39.1
0307:  MOVF   39,W
0308:  BSF    03.5
0309:  MOVWF  07
030A:  BCF    03.5
030B:  BCF    07.1
....................    spi_write(0x26); 
030C:  MOVF   13,W
030D:  MOVLW  26
030E:  MOVWF  13
030F:  BSF    03.5
0310:  RRF    14,W
0311:  BTFSS  03.0
0312:  GOTO   310
....................    spi_write(0x21); 
0313:  BCF    03.5
0314:  MOVF   13,W
0315:  MOVLW  21
0316:  MOVWF  13
0317:  BSF    03.5
0318:  RRF    14,W
0319:  BTFSS  03.0
031A:  GOTO   318
....................    output_high(RF_CS); 
031B:  BCF    03.5
031C:  BCF    39.1
031D:  MOVF   39,W
031E:  BSF    03.5
031F:  MOVWF  07
0320:  BCF    03.5
0321:  BSF    07.1
....................  
....................    //STATUS 
....................    //Reseteo del registro STATUS 
....................    output_low(RF_CS); 
0322:  BCF    39.1
0323:  MOVF   39,W
0324:  BSF    03.5
0325:  MOVWF  07
0326:  BCF    03.5
0327:  BCF    07.1
....................    spi_write(0x27); 
0328:  MOVF   13,W
0329:  MOVLW  27
032A:  MOVWF  13
032B:  BSF    03.5
032C:  RRF    14,W
032D:  BTFSS  03.0
032E:  GOTO   32C
....................    spi_write(0x70); 
032F:  BCF    03.5
0330:  MOVF   13,W
0331:  MOVLW  70
0332:  MOVWF  13
0333:  BSF    03.5
0334:  RRF    14,W
0335:  BTFSS  03.0
0336:  GOTO   334
....................    output_high(RF_CS); 
0337:  BCF    03.5
0338:  BCF    39.1
0339:  MOVF   39,W
033A:  BSF    03.5
033B:  MOVWF  07
033C:  BCF    03.5
033D:  BSF    07.1
....................  
....................    //RX_PW_P0 
....................    //Nº de bytes en Pipe0. 
....................    //1 byte (ACK). 
....................    output_low(RF_CS); 
033E:  BCF    39.1
033F:  MOVF   39,W
0340:  BSF    03.5
0341:  MOVWF  07
0342:  BCF    03.5
0343:  BCF    07.1
....................    spi_write(0x31); 
0344:  MOVF   13,W
0345:  MOVLW  31
0346:  MOVWF  13
0347:  BSF    03.5
0348:  RRF    14,W
0349:  BTFSS  03.0
034A:  GOTO   348
....................    spi_write(0x01); 
034B:  BCF    03.5
034C:  MOVF   13,W
034D:  MOVLW  01
034E:  MOVWF  13
034F:  BSF    03.5
0350:  RRF    14,W
0351:  BTFSS  03.0
0352:  GOTO   350
....................    output_high(RF_CS); 
0353:  BCF    03.5
0354:  BCF    39.1
0355:  MOVF   39,W
0356:  BSF    03.5
0357:  MOVWF  07
0358:  BCF    03.5
0359:  BSF    07.1
....................  
....................    //RX_PW_P1 
....................    //Nº de bytes en Pipe1. 
....................    //10 byte (Direccion emisor y trama). 
....................    output_low(RF_CS); 
035A:  BCF    39.1
035B:  MOVF   39,W
035C:  BSF    03.5
035D:  MOVWF  07
035E:  BCF    03.5
035F:  BCF    07.1
....................    spi_write(0x32); 
0360:  MOVF   13,W
0361:  MOVLW  32
0362:  MOVWF  13
0363:  BSF    03.5
0364:  RRF    14,W
0365:  BTFSS  03.0
0366:  GOTO   364
....................    spi_write(0x0A); 
0367:  BCF    03.5
0368:  MOVF   13,W
0369:  MOVLW  0A
036A:  MOVWF  13
036B:  BSF    03.5
036C:  RRF    14,W
036D:  BTFSS  03.0
036E:  GOTO   36C
....................    output_high(RF_CS); 
036F:  BCF    03.5
0370:  BCF    39.1
0371:  MOVF   39,W
0372:  BSF    03.5
0373:  MOVWF  07
0374:  BCF    03.5
0375:  BSF    07.1
....................  
....................    //RX_PW_P2 
....................    //Nº de bytes en Pipe2. 
....................    //10 byte (Direccion emisor y trama). 
....................    output_low(RF_CS); 
0376:  BCF    39.1
0377:  MOVF   39,W
0378:  BSF    03.5
0379:  MOVWF  07
037A:  BCF    03.5
037B:  BCF    07.1
....................    spi_write(0x33); 
037C:  MOVF   13,W
037D:  MOVLW  33
037E:  MOVWF  13
037F:  BSF    03.5
0380:  RRF    14,W
0381:  BTFSS  03.0
0382:  GOTO   380
....................    spi_write(0x0A); 
0383:  BCF    03.5
0384:  MOVF   13,W
0385:  MOVLW  0A
0386:  MOVWF  13
0387:  BSF    03.5
0388:  RRF    14,W
0389:  BTFSS  03.0
038A:  GOTO   388
....................    output_high(RF_CS); 
038B:  BCF    03.5
038C:  BCF    39.1
038D:  MOVF   39,W
038E:  BSF    03.5
038F:  MOVWF  07
0390:  BCF    03.5
0391:  BSF    07.1
0392:  BCF    0A.3
0393:  BCF    0A.4
0394:  GOTO   497 (RETURN)
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                    RF_ON()                         * 
.................... //***************************************************** 
.................... //*Descripción:Esta rutina activa el módulo de        * 
.................... //*radiofrecuencia en modo escucha para poder recibir * 
.................... //*datos enviados a su dirección.                     * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_ON() 
.................... { 
....................  
....................    output_low(RF_CE); 
0395:  BCF    39.2
0396:  MOVF   39,W
0397:  BSF    03.5
0398:  MOVWF  07
0399:  BCF    03.5
039A:  BCF    07.2
....................  
....................    // CONFIG 
....................    //Se activa el modulo, se pone en recepción, 
....................    //se activa el CRC para que utilice 2 bytes. 
....................    output_low(RF_CS); 
039B:  BCF    39.1
039C:  MOVF   39,W
039D:  BSF    03.5
039E:  MOVWF  07
039F:  BCF    03.5
03A0:  BCF    07.1
....................    spi_write(0x20); 
03A1:  MOVF   13,W
03A2:  MOVLW  20
03A3:  MOVWF  13
03A4:  BSF    03.5
03A5:  RRF    14,W
03A6:  BTFSS  03.0
03A7:  GOTO   3A5
....................    spi_write(0x0F); 
03A8:  BCF    03.5
03A9:  MOVF   13,W
03AA:  MOVLW  0F
03AB:  MOVWF  13
03AC:  BSF    03.5
03AD:  RRF    14,W
03AE:  BTFSS  03.0
03AF:  GOTO   3AD
....................    output_high(RF_CS); 
03B0:  BCF    03.5
03B1:  BCF    39.1
03B2:  MOVF   39,W
03B3:  BSF    03.5
03B4:  MOVWF  07
03B5:  BCF    03.5
03B6:  BSF    07.1
....................  
....................    delay_ms(2); 
03B7:  MOVLW  02
03B8:  MOVWF  3B
03B9:  CALL   161
....................    output_high(RF_CE); 
03BA:  BCF    39.2
03BB:  MOVF   39,W
03BC:  BSF    03.5
03BD:  MOVWF  07
03BE:  BCF    03.5
03BF:  BSF    07.2
....................    delay_us(150); 
03C0:  MOVLW  C7
03C1:  MOVWF  77
03C2:  DECFSZ 77,F
03C3:  GOTO   3C2
03C4:  GOTO   3C5
03C5:  BCF    0A.3
03C6:  BCF    0A.4
03C7:  GOTO   498 (RETURN)
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                 RF_OFF()                         * 
.................... //***************************************************** 
.................... //*Descripción:Este procedimiento desactiva el módulo * 
.................... //*de radiofrecuencia.                                * 
.................... //***************************************************** 
.................... //*Variables de entrada:                              * 
.................... //*Variables de salida:                               * 
.................... //***************************************************** 
.................... void RF_OFF() 
.................... { 
....................    output_low(RF_CE); 
....................  
....................    // CONFIG 
....................    //Se desactiva el modulo 
....................    output_low(RF_CS); 
....................    spi_write(0x20); 
....................    spi_write(0x0C); 
....................    output_high(RF_CS); 
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                 RF_SEND()                         * 
.................... //***************************************************** 
.................... //*Descripción:Esta función envía 8 Bytes de datos a  * 
.................... //*la dirección indicada informando de la correcta    * 
.................... //*recepción en el destinatario.                      * 
.................... //***************************************************** 
.................... //*Variables de entrada:- RF_DATA[]                   * 
.................... //*                     - RF_DIR 
.................... //*Variables de salida: -                             * 
.................... //*Salida:              - 0: Envío correcto (ACK OK)  * 
.................... //*                     - 1: No recepcibido (NO ACK)  * 
.................... //*                     - 2: No enviado               * 
.................... //***************************************************** 
.................... int RF_SEND() 
.................... { 
....................    int i; 
....................    int estado; 
....................  
....................  
....................    if(bit_test(INTCON,7)) 
....................       interRF=1; 
....................    else 
....................       interRF=0; 
....................  
....................    disable_interrupts(GLOBAL); 
....................  
....................    // INICIO 
....................    output_low(RF_CE); 
....................  
....................    //STATUS 
....................    //Reseteo del registro STATUS 
....................    output_low(RF_CS); 
....................    spi_write(0x27); 
....................    spi_write(0x70); 
....................    output_high(RF_CS); 
....................  
....................    // EN_RXADDR 
....................    //Se habilita el Pipe0 para la recepción del ACK 
....................    output_low(RF_CS); 
....................    spi_write(0x22); 
....................    spi_write(0x01); 
....................    output_high(RF_CS); 
....................  
....................    // TX_ADDR 
....................    //Se configura la dirección de transmisión=RF_DIR 
....................    output_low(RF_CS); 
....................    spi_write(0x30); 
....................    spi_write(RF_DIR); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    output_high(RF_CS); 
....................  
....................    // RX_ADDR_P0 
....................    //Para la recepción del ACK se debe configurar el Pipe0 con 
....................    //la misma dirección a trasmitir. 
....................    output_low(RF_CS); 
....................    spi_write(0x2A); 
....................    spi_write(RF_DIR); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    spi_write(0xC2); 
....................    output_high(RF_CS); 
....................  
....................    // RX_ADDR_P1 
....................    //Se mete en RF_DIR la direccion propia. 
....................    //De esta manera el receptor sabe la dirección 
....................    //del transmisor. 
....................    output_low(RF_CS); 
....................    spi_write(0x0B); 
....................    RF_DIR=spi_read(0); 
....................    spi_read(0); 
....................    spi_read(0); 
....................    spi_read(0); 
....................    spi_read(0); 
....................    output_high(RF_CS); 
....................  
....................    // W_TX_PAYLOAD 
....................    //Se manda los datos al transductor 
....................    output_low(RF_CS); 
....................    spi_write(0xA0); 
....................  
....................    DATA_N_SND++; 
....................    spi_write(DATA_N_SND); 
....................    spi_write(RF_DIR); 
....................    for (i=0;i<8;i++) 
....................       spi_write(RF_DATA[i]); 
....................  
....................    output_high(RF_CS); 
....................  
....................    // CONFIG 
....................    //Se pasa a modo transmisión. 
....................    output_low(RF_CS); 
....................    spi_write(0x20); 
....................    spi_write(0x0E); 
....................    output_high(RF_CS); 
....................  
....................    // Pulso de comienzo de envío 
....................    output_high(RF_CE); 
....................    delay_us(15); 
....................    output_low(RF_CE); 
....................  
....................    noRF=0; 
....................  
....................    while (input(RF_IRQ)==1) { 
....................       noRF++; 
....................       //Si no da respuesta en 7ms, no se ha enviado. 
....................       if(noRF==500){ 
....................       break; 
....................          } 
....................    } 
....................  
....................  
....................    // STATUS 
....................    //Lectura del estado en el registro estatus. 
....................    output_low(RF_CS); 
....................    estado=spi_read(0x27); 
....................    spi_write(0x70); 
....................    output_high(RF_CS); 
....................  
....................  
....................    // EN_RXADDR 
....................    //Habilitar los Pipe0,Pipe1 y Pipe2. 
....................    output_low(RF_CS); 
....................    spi_write(0x22); 
....................    spi_write(0x07); 
....................    output_high(RF_CS); 
....................  
....................       // TX_FLUSH 
....................    //Limpieza de la FIFO de salida 
....................    output_low(RF_CS); 
....................    spi_write(0xE1); 
....................    output_high(RF_CS); 
....................  
....................    // CONFIG 
....................    //Paso a modo recepción 
....................    output_low(RF_CS); 
....................    spi_write(0x20); 
....................    spi_write(0x0F); 
....................    output_high(RF_CS); 
....................  
....................    // FIN 
....................    output_high(RF_CE); 
....................  
....................    delay_us(150); 
....................  
....................    //Si no da respuesta en 7ms, no se ha enviado. 
....................    if(noRF==500){ 
....................         if(interRF==1) 
....................         enable_interrupts(GLOBAL); 
....................         clear_interrupt(int_ext); 
....................         return(2); 
....................    } 
....................  
....................    //estado 
....................    //Chequeo de los bit del registro STATUS que indican si se ha recibido 
....................    //ACK y si se ha terminado las retrasmisiones sin ningun ACK. 
....................    if ((bit_test(estado,4)==0) && (bit_test(estado,5)==1)){ 
....................       if(interRF==1) 
....................       enable_interrupts(GLOBAL); 
....................       clear_interrupt(int_ext); 
....................       return(0); 
....................       } 
....................    else{ 
....................       if(interRF==1) 
....................       enable_interrupts(GLOBAL); 
....................       clear_interrupt(int_ext); 
....................       return(1); 
....................       } 
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //***************************************************** 
.................... //*                 RF_RECEIVE()                      * 
.................... //***************************************************** 
.................... //*Descripción: Esta rutina se encarga de comprobar si* 
.................... //*se ha producido una recepción y de ser así,        * 
.................... //*devuelve la trama recibida.                        * 
.................... //***************************************************** 
.................... //*Variables de entrada:-                             * 
.................... //*Variables de salida: - RF_DATA[]                   * 
.................... //*                     - RF_DIR                      * 
.................... //*Salida:         - 0: Recepción correcta y única    * 
.................... //*                - 1: Recepción correcta y múltiple * 
.................... //*                - 2: No se ha producido recepción  * 
.................... //*                - 3: No se ha producido recepción  * 
.................... //***************************************************** 
.................... int RF_RECEIVE() 
.................... { 
....................  
....................    int i; 
....................    int mas; 
....................    int estado; 
....................  
....................    if (input(RF_IRQ)==1 && RCVNW==0){ 
*
004F:  BSF    03.5
0050:  BSF    06.0
0051:  BCF    03.5
0052:  BTFSS  06.0
0053:  GOTO   059
0054:  BTFSC  2B.1
0055:  GOTO   059
....................       return (2); 
0056:  MOVLW  02
0057:  MOVWF  78
0058:  GOTO   0DE
....................       } 
....................  
....................    //STATUS 
....................    //Lectura y reseteo del registro STATUS 
....................    output_low(RF_CS); 
0059:  BCF    39.1
005A:  MOVF   39,W
005B:  BSF    03.5
005C:  MOVWF  07
005D:  BCF    03.5
005E:  BCF    07.1
....................    estado=spi_read(0x27); 
005F:  MOVF   13,W
0060:  MOVLW  27
0061:  MOVWF  13
0062:  BSF    03.5
0063:  RRF    14,W
0064:  BTFSS  03.0
0065:  GOTO   063
0066:  BCF    03.5
0067:  MOVF   13,W
0068:  MOVWF  41
....................    spi_write(0x70); 
0069:  MOVF   13,W
006A:  MOVLW  70
006B:  MOVWF  13
006C:  BSF    03.5
006D:  RRF    14,W
006E:  BTFSS  03.0
006F:  GOTO   06D
....................    output_high(RF_CS); 
0070:  BCF    03.5
0071:  BCF    39.1
0072:  MOVF   39,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BSF    07.1
....................  
....................    //estado 
....................    //Chequeo de la interrupción de recepción. 
....................    if (bit_test(estado,6)==0 && RCVNW==0){ 
0077:  BTFSC  41.6
0078:  GOTO   07E
0079:  BTFSC  2B.1
007A:  GOTO   07E
....................       return(3); 
007B:  MOVLW  03
007C:  MOVWF  78
007D:  GOTO   0DE
....................       } 
....................  
....................    //R_RX_PAYLOAD 
....................    //Lectura de los datos recibidos. 
....................    output_low(RF_CS); 
007E:  BCF    39.1
007F:  MOVF   39,W
0080:  BSF    03.5
0081:  MOVWF  07
0082:  BCF    03.5
0083:  BCF    07.1
....................    spi_write(0x61); 
0084:  MOVF   13,W
0085:  MOVLW  61
0086:  MOVWF  13
0087:  BSF    03.5
0088:  RRF    14,W
0089:  BTFSS  03.0
008A:  GOTO   088
....................    DATA_N_RCV=spi_read(0); 
008B:  BCF    03.5
008C:  MOVF   13,W
008D:  CLRF   13
008E:  BSF    03.5
008F:  RRF    14,W
0090:  BTFSS  03.0
0091:  GOTO   08F
0092:  BCF    03.5
0093:  MOVF   13,W
0094:  MOVWF  2F
....................    RF_DIR=spi_read(0); 
0095:  MOVF   13,W
0096:  CLRF   13
0097:  BSF    03.5
0098:  RRF    14,W
0099:  BTFSS  03.0
009A:  GOTO   098
009B:  BCF    03.5
009C:  MOVF   13,W
009D:  MOVWF  38
....................    for (i=0;i<8;i++) 
009E:  CLRF   3F
009F:  MOVF   3F,W
00A0:  SUBLW  07
00A1:  BTFSS  03.0
00A2:  GOTO   0B2
....................    { 
....................       RF_DATA[i]=spi_read(0); 
00A3:  MOVLW  30
00A4:  ADDWF  3F,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   13,W
00A8:  CLRF   13
00A9:  BSF    03.5
00AA:  RRF    14,W
00AB:  BTFSS  03.0
00AC:  GOTO   0AA
00AD:  BCF    03.5
00AE:  MOVF   13,W
00AF:  MOVWF  00
00B0:  INCF   3F,F
00B1:  GOTO   09F
....................    } 
....................    output_high(RF_CS); 
00B2:  BCF    39.1
00B3:  MOVF   39,W
00B4:  BSF    03.5
00B5:  MOVWF  07
00B6:  BCF    03.5
00B7:  BSF    07.1
....................  
....................    //FIFO_STATUS 
....................    //Comprobación del estado de la FIFO de 
....................    //recepción para comprobar si hay más datos 
....................    output_low(RF_CS); 
00B8:  BCF    39.1
00B9:  MOVF   39,W
00BA:  BSF    03.5
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  BCF    07.1
....................    spi_write(0x17); 
00BE:  MOVF   13,W
00BF:  MOVLW  17
00C0:  MOVWF  13
00C1:  BSF    03.5
00C2:  RRF    14,W
00C3:  BTFSS  03.0
00C4:  GOTO   0C2
....................    mas=spi_read(0); 
00C5:  BCF    03.5
00C6:  MOVF   13,W
00C7:  CLRF   13
00C8:  BSF    03.5
00C9:  RRF    14,W
00CA:  BTFSS  03.0
00CB:  GOTO   0C9
00CC:  BCF    03.5
00CD:  MOVF   13,W
00CE:  MOVWF  40
....................    output_high(RF_CS); 
00CF:  BCF    39.1
00D0:  MOVF   39,W
00D1:  BSF    03.5
00D2:  MOVWF  07
00D3:  BCF    03.5
00D4:  BSF    07.1
....................  
....................    if (bit_test(mas,0)==0){ 
00D5:  BTFSC  40.0
00D6:  GOTO   0DB
....................       RCVNW=1; 
00D7:  BSF    2B.1
....................       return(1); 
00D8:  MOVLW  01
00D9:  MOVWF  78
00DA:  GOTO   0DE
....................    } 
....................       RCVNW=0; 
00DB:  BCF    2B.1
....................       return(0); 
00DC:  MOVLW  00
00DD:  MOVWF  78
00DE:  RETURN
.................... } 
.................... //***************************************************** 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #use rs232(uart1, baud=9600)//usart1 -->ajuste de XMIT y RCV para la USART 1  
.................... #define LED PIN_B1 
.................... #byte porta=0x05           // Dirección del puerto A. 
.................... #int_ext                   // Interrupción del módulo RF. 
....................  
.................... void IntRB0() 
.................... { 
....................    int8 ret1; 
....................    ret1 = RF_RECEIVE(); 
*
00F4:  CALL   04F
00F5:  MOVF   78,W
00F6:  MOVWF  3E
....................    if ( (ret1 == 0) || (ret1 == 1) )         // Tanto si hay recepción simple o múltiple, leer datos. 
00F7:  MOVF   3E,F
00F8:  BTFSC  03.2
00F9:  GOTO   0FC
00FA:  DECFSZ 3E,W
00FB:  GOTO   155
....................    { 
....................       do 
....................       {     
....................          porta=RF_DATA[0];                   // El puerto A contendrá el valor que le llegue del emisor, a través de RF_DATA[0]. 
00FC:  MOVF   30,W
00FD:  MOVWF  05
....................          printf("\n %c",RF_DATA[2]); 
00FE:  MOVLW  0A
00FF:  BTFSS  0C.4
0100:  GOTO   0FF
0101:  MOVWF  19
0102:  MOVLW  20
0103:  BTFSS  0C.4
0104:  GOTO   103
0105:  MOVWF  19
0106:  MOVF   32,W
0107:  BTFSS  0C.4
0108:  GOTO   107
0109:  MOVWF  19
....................          printf("\n %u",RF_DATA[3]); 
010A:  MOVLW  0A
010B:  BTFSS  0C.4
010C:  GOTO   10B
010D:  MOVWF  19
010E:  MOVLW  20
010F:  BTFSS  0C.4
0110:  GOTO   10F
0111:  MOVWF  19
0112:  MOVF   33,W
0113:  MOVWF  3F
0114:  MOVLW  1B
0115:  MOVWF  40
....................          ret1 = RF_RECEIVE();                // "ret1" nos dirá si hay recepción simple, múltiple o no hay datos para leer. 
*
014C:  CALL   04F
014D:  MOVF   78,W
014E:  MOVWF  3E
....................       }while ( (ret1 == 0) || (ret1 == 1) ); // Mientras haya datos para leer, seguir leyendo. 
014F:  MOVF   3E,F
0150:  BTFSC  03.2
0151:  GOTO   0FC
0152:  DECFSZ 3E,W
0153:  GOTO   155
0154:  GOTO   0FC
....................    }   
0155:  BCF    0B.1
0156:  BCF    0A.3
0157:  BCF    0A.4
0158:  GOTO   02B
.................... } 
....................  
.................... void main() {  
*
0422:  MOVF   03,W
0423:  ANDLW  1F
0424:  MOVWF  03
0425:  BCF    2B.1
0426:  CLRF   2E
0427:  CLRF   2F
0428:  MOVLW  FF
0429:  MOVWF  39
042A:  BSF    03.5
042B:  BSF    03.6
042C:  BSF    07.3
042D:  MOVLW  A0
042E:  BCF    03.6
042F:  MOVWF  19
0430:  MOVLW  01
0431:  MOVWF  1A
0432:  MOVLW  A6
0433:  MOVWF  18
0434:  MOVLW  90
0435:  BCF    03.5
0436:  MOVWF  18
0437:  BSF    03.5
0438:  BSF    03.6
0439:  MOVF   09,W
043A:  ANDLW  C0
043B:  MOVWF  09
043C:  BCF    03.6
043D:  BCF    1F.4
043E:  BCF    1F.5
043F:  MOVLW  00
0440:  BSF    03.6
0441:  MOVWF  08
0442:  BCF    03.5
0443:  CLRF   07
0444:  CLRF   08
0445:  CLRF   09
0446:  BCF    03.7
....................     output_low(LED); 
*
0454:  BSF    03.5
0455:  BCF    06.1
0456:  BCF    03.5
0457:  BCF    06.1
....................     delay_ms(1000); 
0458:  MOVLW  04
0459:  MOVWF  3A
045A:  MOVLW  FA
045B:  MOVWF  3B
045C:  CALL   161
045D:  DECFSZ 3A,F
045E:  GOTO   45A
....................     output_high(LED); 
045F:  BSF    03.5
0460:  BCF    06.1
0461:  BCF    03.5
0462:  BSF    06.1
....................     delay_ms(1000); 
0463:  MOVLW  04
0464:  MOVWF  3A
0465:  MOVLW  FA
0466:  MOVWF  3B
0467:  CALL   161
0468:  DECFSZ 3A,F
0469:  GOTO   465
....................     output_low(LED); 
046A:  BSF    03.5
046B:  BCF    06.1
046C:  BCF    03.5
046D:  BCF    06.1
....................     delay_ms(1000); 
046E:  MOVLW  04
046F:  MOVWF  3A
0470:  MOVLW  FA
0471:  MOVWF  3B
0472:  CALL   161
0473:  DECFSZ 3A,F
0474:  GOTO   470
....................     output_high(LED); 
0475:  BSF    03.5
0476:  BCF    06.1
0477:  BCF    03.5
0478:  BSF    06.1
....................     delay_ms(1000);  
0479:  MOVLW  04
047A:  MOVWF  3A
047B:  MOVLW  FA
047C:  MOVWF  3B
047D:  CALL   161
047E:  DECFSZ 3A,F
047F:  GOTO   47B
....................     output_low(LED); 
0480:  BSF    03.5
0481:  BCF    06.1
0482:  BCF    03.5
0483:  BCF    06.1
....................     delay_ms(1000);    
0484:  MOVLW  04
0485:  MOVWF  3A
0486:  MOVLW  FA
0487:  MOVWF  3B
0488:  CALL   161
0489:  DECFSZ 3A,F
048A:  GOTO   486
....................     set_tris_a(0b000000);     // Todo el puerto A como salida. 
048B:  MOVLW  00
048C:  BSF    03.5
048D:  MOVWF  05
....................     porta=0;                  // Inicialmente lo ponemos a cero. 
048E:  BCF    03.5
048F:  CLRF   05
....................     RF_INT_EN();              // Habilitar interrupción RB0/INT. 
0490:  GOTO   176
....................     RF_CONFIG_SPI();          // Configurar módulos SPI del PIC. 
0491:  GOTO   184
....................     RF_CONFIG(0x40,0x08);     // Configurar módulo RF (canal y dirección). 
0492:  MOVLW  40
0493:  MOVWF  3A
0494:  MOVLW  08
0495:  MOVWF  3B
0496:  GOTO   1A2
....................     RF_ON();                  // Activar el módulo RF. 
0497:  GOTO   395
....................     printf("configurado! \n"); 
0498:  MOVLW  59
0499:  BSF    03.6
049A:  MOVWF  0D
049B:  MOVLW  01
049C:  MOVWF  0F
049D:  BCF    03.6
049E:  GOTO   3C8
....................    // Bucle infinito.  
....................  while(TRUE)  
....................  {  
049F:  GOTO   49F
....................     //putc('h');//Envía el caracter vía serie por la USART del PIC  
....................     // delay_ms(1000); 
....................  
....................  }  
....................   
.................... } 
04A0:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
